[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 640
PlayResY: 480

[Aegisub Project Garbage]
Active Line: 1
Video Position: 516

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: EN,Calisto MT,21,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,0,2,10,10,30,1
Style: Declare,微软雅黑,30,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,0,8,10,10,10,1
Style: staff,微软雅黑,30,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,0,2,5,10,10,10,1
Style: title,微软雅黑,35,&H001D64D9,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,0,1,5,10,10,10,1
Style: Default,雅黑宋体,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,0,2,10,10,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:09.52,0:00:13.66,EN,,0,0,0,,Metacircular Evaluator II
Dialogue: 0,0:00:17.21,0:00:17.96,EN,,0,0,0,,PROFESSOR: Well, let's see.
Dialogue: 0,0:00:19.52,0:00:21.29,EN,,0,0,0,,What we did so far was a lot of fun,
Dialogue: 0,0:00:21.52,0:00:23.05,EN,,0,0,0,,was it useful for anything?
Dialogue: 0,0:00:26.33,0:00:27.96,EN,,0,0,0,,I suppose the answer is going to be yes.
Dialogue: 0,0:00:29.38,0:00:31.92,EN,,0,0,0,,If these metacircular interpreters
Dialogue: 0,0:00:32.96,0:00:34.60,EN,,0,0,0,,are a valuable thing to play with.
Dialogue: 0,0:00:34.62,0:00:36.17,EN,,0,0,0,,I spend, say
Dialogue: 0,0:00:38.05,0:00:41.85,EN,,0,0,0,,there have been times I spend 50% of my time, over a year,
Dialogue: 0,0:00:42.86,0:00:45.26,EN,,0,0,0,,trying various design alternatives
Dialogue: 0,0:00:45.76,0:00:48.19,EN,,0,0,0,,by experimenting with them with metacircular interpreters--
Dialogue: 0,0:00:49.47,0:00:52.01,EN,,0,0,0,,metacircular interpreters like the sort you just saw.
Dialogue: 0,0:00:52.57,0:00:54.11,EN,,0,0,0,,Metacircular is because
Dialogue: 0,0:00:54.72,0:00:56.94,EN,,0,0,0,,they are defined in terms of themselves in such a way
Dialogue: 0,0:00:56.97,0:00:59.71,EN,,0,0,0,,that the language they interpret contains itself.
Dialogue: 0,0:01:01.27,0:01:03.87,EN,,0,0,0,,Such interpreters are a convenient medium
Dialogue: 0,0:01:03.88,0:01:05.58,EN,,0,0,0,,for exploring language issues.
Dialogue: 0,0:01:06.80,0:01:09.44,EN,,0,0,0,,If you want to try adding a new feature,
Dialogue: 0,0:01:10.51,0:01:12.38,EN,,0,0,0,,it's sort of a snap, it's easy,
Dialogue: 0,0:01:12.73,0:01:15.10,EN,,0,0,0,,you just do it and see what happens.
Dialogue: 0,0:01:15.49,0:01:17.20,EN,,0,0,0,,You play with that language for a while you say,
Dialogue: 0,0:01:17.24,0:01:18.24,EN,,0,0,0,,gee, I'm didn't like that,
Dialogue: 0,0:01:18.52,0:01:19.47,EN,,0,0,0,,you throw it away.
Dialogue: 0,0:01:20.96,0:01:23.55,EN,,0,0,0,,Or you might want to see what
Dialogue: 0,0:01:23.64,0:01:27.37,EN,,0,0,0,,the difference is if you'd make a slight difference in the binding strategy,
Dialogue: 0,0:01:28.81,0:01:31.90,EN,,0,0,0,,or some more complicated things that might occur.
Dialogue: 0,0:01:33.72,0:01:35.48,EN,,0,0,0,,In fact, these metacircular interpreters
Dialogue: 0,0:01:36.17,0:01:37.88,EN,,0,0,0,,are an excellent medium for people
Dialogue: 0,0:01:38.20,0:01:42.56,EN,,0,0,0,,exchanging ideas about language design,
Dialogue: 0,0:01:43.98,0:01:45.74,EN,,0,0,0,,because they're pretty easy to understand,
Dialogue: 0,0:01:46.28,0:01:48.46,EN,,0,0,0,,and they're short, and compact, and simple.
Dialogue: 0,0:01:49.32,0:01:50.80,EN,,0,0,0,,If I have some idea
Dialogue: 0,0:01:51.53,0:01:53.77,EN,,0,0,0,,that I want somebody to criticize
Dialogue: 0,0:01:54.25,0:01:58.32,EN,,0,0,0,,like say, Dan Friedman at Indiana,
Dialogue: 0,0:01:59.05,0:02:02.00,EN,,0,0,0,,I'd write a little metacircular interpreter
Dialogue: 0,0:02:02.56,0:02:03.79,EN,,0,0,0,,send him some network mail
Dialogue: 0,0:02:04.65,0:02:05.45,EN,,0,0,0,,with this interpreter in it.
Dialogue: 0,0:02:05.45,0:02:07.90,EN,,0,0,0,,He could whip it up on his machine and play with it
Dialogue: 0,0:02:07.92,0:02:09.82,EN,,0,0,0,,and say, that's no good.
Dialogue: 0,0:02:11.94,0:02:13.10,EN,,0,0,0,,And then send it back to me and say,
Dialogue: 0,0:02:13.13,0:02:14.83,EN,,0,0,0,,well, why don't you try this one, it's a little better.
Dialogue: 0,0:02:16.88,0:02:19.36,EN,,0,0,0,,So I want to show you some of that technology.
Dialogue: 0,0:02:20.16,0:02:24.20,EN,,0,0,0,,See, because, really, it's the essential, simple technology
Dialogue: 0,0:02:24.72,0:02:28.68,EN,,0,0,0,,for getting started in designing your own languages for particular purposes.
Dialogue: 0,0:02:30.79,0:02:32.08,EN,,0,0,0,,Let's start by adding
Dialogue: 0,0:02:32.51,0:02:34.21,EN,,0,0,0,,a very simple feature to a Lisp.
Dialogue: 0,0:02:40.64,0:02:44.37,EN,,0,0,0,,Now, one thing I want to tell you about is features, before I start.
Dialogue: 0,0:02:49.56,0:02:52.17,EN,,0,0,0,,There are many languages that have made a mess of themselves
Dialogue: 0,0:02:53.05,0:02:54.91,EN,,0,0,0,,by adding huge numbers of features.
Dialogue: 0,0:02:56.86,0:02:58.38,EN,,0,0,0,,Computer scientists have a joke
Dialogue: 0,0:02:59.28,0:03:02.52,EN,,0,0,0,,about bugs that transform it to features all the time.
Dialogue: 0,0:03:05.03,0:03:06.46,EN,,0,0,0,,But I like to think of it is that
Dialogue: 0,0:03:08.91,0:03:11.44,EN,,0,0,0,,many systems suffer from what's called creeping featurism.
Dialogue: 0,0:03:12.82,0:03:13.44,EN,,0,0,0,,Which is that
Dialogue: 0,0:03:14.94,0:03:18.16,EN,,0,0,0,,George has a pet feature he'd like in the system,
Dialogue: 0,0:03:18.72,0:03:19.36,EN,,0,0,0,,so he adds it.
Dialogue: 0,0:03:20.17,0:03:22.14,EN,,0,0,0,,And then Harry says, go says
Dialogue: 0,0:03:22.17,0:03:24.20,EN,,0,0,0,,gee, this system is no longer what exactly I like,
Dialogue: 0,0:03:24.24,0:03:25.92,EN,,0,0,0,,so I'm going to add my favorite feature.
Dialogue: 0,0:03:26.64,0:03:30.24,EN,,0,0,0,,And then Jim adds his favorite feature.
Dialogue: 0,0:03:30.83,0:03:31.79,EN,,0,0,0,,And, after a while,
Dialogue: 0,0:03:31.80,0:03:34.81,EN,,0,0,0,,the thing has a manual 500 pages long
Dialogue: 0,0:03:35.15,0:03:36.51,EN,,0,0,0,,that no one can understand.
Dialogue: 0,0:03:37.79,0:03:39.32,EN,,0,0,0,,And sometimes it's the same person
Dialogue: 0,0:03:39.90,0:03:41.37,EN,,0,0,0,,who writes all of these features
Dialogue: 0,0:03:41.39,0:03:43.23,EN,,0,0,0,,and produces this terribly complicated thing.
Dialogue: 0,0:03:44.14,0:03:46.09,EN,,0,0,0,,In some cases, like editors,
Dialogue: 0,0:03:47.37,0:03:49.12,EN,,0,0,0,,it's sort of reasonable to have lots of features,
Dialogue: 0,0:03:50.92,0:03:52.65,EN,,0,0,0,,because there are a lot of things you want to be able to do
Dialogue: 0,0:03:52.68,0:03:53.76,EN,,0,0,0,,and many of them arbitrary.
Dialogue: 0,0:03:56.11,0:03:57.29,EN,,0,0,0,,But in computer languages,
Dialogue: 0,0:03:57.85,0:03:58.91,EN,,0,0,0,,I think it's a disaster
Dialogue: 0,0:04:00.01,0:04:01.29,EN,,0,0,0,,to have too much stuff in them.
Dialogue: 0,0:04:04.03,0:04:08.00,EN,,0,0,0,,The other alternative you get into is something called feeping creaturism,
Dialogue: 0,0:04:09.52,0:04:11.39,EN,,0,0,0,,which is where you have a box
Dialogue: 0,0:04:11.80,0:04:15.29,EN,,0,0,0,,which has a display, a fancy display, and a mouse,
Dialogue: 0,0:04:15.95,0:04:20.04,EN,,0,0,0,,and there is all sorts of complexity associated with all this fancy IO.
Dialogue: 0,0:04:21.01,0:04:22.80,EN,,0,0,0,,And your computer language becomes
Dialogue: 0,0:04:23.34,0:04:25.37,EN,,0,0,0,,a dismal, little, tiny thing that barely works
Dialogue: 0,0:04:25.40,0:04:27.90,EN,,0,0,0,,because of all the swapping, and disk twitching, and so on,
Dialogue: 0,0:04:28.09,0:04:29.36,EN,,0,0,0,,caused by your Window system.
Dialogue: 0,0:04:30.08,0:04:31.82,EN,,0,0,0,,And every time you go near the computer,
Dialogue: 0,0:04:31.93,0:04:33.45,EN,,0,0,0,,the mouse process wakes up and says,
Dialogue: 0,0:04:33.85,0:04:35.95,EN,,0,0,0,,gee do you have something for me to do,
Dialogue: 0,0:04:36.14,0:04:37.23,EN,,0,0,0,,and then it goes back to sleep.
Dialogue: 0,0:04:37.44,0:04:39.44,EN,,0,0,0,,And if you accidentally push mouse with you elbow,
Dialogue: 0,0:04:39.61,0:04:42.32,EN,,0,0,0,,a big puff of smoke comes out of your computer and things like that.
Dialogue: 0,0:04:42.94,0:04:45.29,EN,,0,0,0,,So two ways to disastrously
Dialogue: 0,0:04:45.55,0:04:47.21,EN,,0,0,0,,destroy a system by adding features.
Dialogue: 0,0:04:47.50,0:04:49.73,EN,,0,0,0,,But try right now to add a little, simple feature.
Dialogue: 0,0:04:52.60,0:04:53.77,EN,,0,0,0,,This actually is a good one,
Dialogue: 0,0:04:53.85,0:04:56.17,EN,,0,0,0,,and in fact, real Lisps have it.
Dialogue: 0,0:04:57.25,0:04:58.17,EN,,0,0,0,,As you've seen,
Dialogue: 0,0:04:59.29,0:05:03.13,EN,,0,0,0,,there are procedures like plus and times
Dialogue: 0,0:05:03.37,0:05:04.89,EN,,0,0,0,,that take any number of arguments.
Dialogue: 0,0:05:05.43,0:05:06.44,EN,,0,0,0,,So we can write things
Dialogue: 0,0:05:06.57,0:05:10.94,EN,,0,0,0,,like the sum of the product of a and x and x,
Dialogue: 0,0:05:12.09,0:05:16.99,EN,,0,0,0,,and the product of b and x and c.
Dialogue: 0,0:05:17.54,0:05:18.68,EN,,0,0,0,,As you can see here,
Dialogue: 0,0:05:18.92,0:05:21.76,EN,,0,0,0,,addition takes three arguments or two arguments,
Dialogue: 0,0:05:22.30,0:05:24.81,EN,,0,0,0,,multiplication takes two arguments or three arguments,
Dialogue: 0,0:05:25.08,0:05:26.76,EN,,0,0,0,,taking numbers of arguments
Dialogue: 0,0:05:26.78,0:05:28.49,EN,,0,0,0,,all of which are to be treated in the same way.
Dialogue: 0,0:05:30.00,0:05:32.17,EN,,0,0,0,,This is a valuable thing,
Dialogue: 0,0:05:32.28,0:05:34.01,EN,,0,0,0,,indefinite numbers of arguments.
Dialogue: 0,0:05:34.96,0:05:38.41,EN,,0,0,0,,Yet the particular Lisp system that I show you
Dialogue: 0,0:05:39.23,0:05:41.85,EN,,0,0,0,,is one where the numbers of arguments is fixed,
Dialogue: 0,0:05:42.62,0:05:45.28,EN,,0,0,0,,because I had to match the arguments against the formal parameters
Dialogue: 0,0:05:45.63,0:05:47.92,EN,,0,0,0,,in the binder, where there's a pairup.
Dialogue: 0,0:05:50.81,0:05:53.80,EN,,0,0,0,,Well, I'd like to be able to define new procedures like this
Dialogue: 0,0:05:54.89,0:05:57.32,EN,,0,0,0,,that can have any number of arguments.
Dialogue: 0,0:05:58.75,0:06:00.40,EN,,0,0,0,,Well there's several parts to this problem.
Dialogue: 0,0:06:01.34,0:06:04.81,EN,,0,0,0,,The first part is coming up with the syntactic specification,
Dialogue: 0,0:06:05.72,0:06:11.21,EN,,0,0,0,,some way of notating the additional arguments,
Dialogue: 0,0:06:12.17,0:06:13.63,EN,,0,0,0,,of which you don't know how many there are.
Dialogue: 0,0:06:15.48,0:06:16.62,EN,,0,0,0,,And then there's the other thing,
Dialogue: 0,0:06:17.10,0:06:18.70,EN,,0,0,0,,which is once we've notated it,
Dialogue: 0,0:06:19.07,0:06:20.78,EN,,0,0,0,,how are we going to interpret that notation
Dialogue: 0,0:06:21.74,0:06:23.10,EN,,0,0,0,,so as to do the right thing,
Dialogue: 0,0:06:23.85,0:06:25.37,EN,,0,0,0,,whatever the right thing is?
Dialogue: 0,0:06:26.98,0:06:28.80,EN,,0,0,0,,So let's consider an example of a sort of thing
Dialogue: 0,0:06:28.84,0:06:30.27,EN,,0,0,0,,we might want to be able to do.
Dialogue: 0,0:06:33.07,0:06:34.51,EN,,0,0,0,,So an example might be,
Dialogue: 0,0:06:35.42,0:06:37.34,EN,,0,0,0,,that I might want to be able to define a procedure
Dialogue: 0,0:06:37.95,0:06:41.36,EN,,0,0,0,,which is a procedure of one required argument x
Dialogue: 0,0:06:42.20,0:06:45.26,EN,,0,0,0,,and a non-required -- bunch of arguments,
Dialogue: 0,0:06:45.28,0:06:47.23,EN,,0,0,0,,I don't know how many there are, called y.
Dialogue: 0,0:06:49.09,0:06:50.36,EN,,0,0,0,,So x is required,
Dialogue: 0,0:06:55.88,0:06:57.44,EN,,0,0,0,,and there are many y's,
Dialogue: 0,0:06:59.53,0:07:05.99,EN,,0,0,0,,many arguments-- y will be the list of them.
Dialogue: 0,0:07:14.48,0:07:16.06,EN,,0,0,0,,Now, with such a thing,
Dialogue: 0,0:07:16.09,0:07:17.68,EN,,0,0,0,,we might be able to say something like,
Dialogue: 0,0:07:19.02,0:07:21.98,EN,,0,0,0,,map-- I'm going to do something to every one--
Dialogue: 0,0:07:22.52,0:07:25.76,EN,,0,0,0,,of that procedure of one argument u,
Dialogue: 0,0:07:27.00,0:07:34.54,EN,,0,0,0,,which multiplies x by u, and we'll apply that to y.
Dialogue: 0,0:07:36.89,0:07:38.04,EN,,0,0,0,,I've used a dot here
Dialogue: 0,0:07:38.59,0:07:41.31,EN,,0,0,0,,to indicate that the thing after this
Dialogue: 0,0:07:42.19,0:07:44.30,EN,,0,0,0,,is a list of all the rest of the arguments.
Dialogue: 0,0:07:46.30,0:07:48.12,EN,,0,0,0,,I'm making a syntactic specification.
Dialogue: 0,0:07:53.32,0:07:54.64,EN,,0,0,0,,Now, what this depends upon,
Dialogue: 0,0:07:55.71,0:07:58.06,EN,,0,0,0,,the reason why this is sort of a reasonable thing to do,
Dialogue: 0,0:07:59.77,0:08:01.96,EN,,0,0,0,,is because this happens to be a syntax
Dialogue: 0,0:08:02.00,0:08:03.60,EN,,0,0,0,,that's used in the Lisp reader
Dialogue: 0,0:08:04.41,0:08:07.15,EN,,0,0,0,,for representing conses.
Dialogue: 0,0:08:08.94,0:08:11.08,EN,,0,0,0,,We've never introduced that before.You never see.
Dialogue: 0,0:08:11.08,0:08:12.78,EN,,0,0,0,,You may have seen when playing with the system
Dialogue: 0,0:08:13.04,0:08:14.62,EN,,0,0,0,,if you cons two things together, you get the
Dialogue: 0,0:08:14.89,0:08:18.12,EN,,0,0,0,,first, space, dot, the second, space--
Dialogue: 0,0:08:19.79,0:08:22.83,EN,,0,0,0,,the first, space, dot, space, the second
Dialogue: 0,0:08:23.08,0:08:24.64,EN,,0,0,0,,with parentheses around the whole thing.
Dialogue: 0,0:08:26.98,0:08:28.16,EN,,0,0,0,,So that, for example,
Dialogue: 0,0:08:28.97,0:08:35.04,EN,,0,0,0,,this x dot y corresponds to a pair,
Dialogue: 0,0:08:36.33,0:08:39.29,EN,,0,0,0,,which has got an x in it and a y in it.
Dialogue: 0,0:08:41.48,0:08:43.98,EN,,0,0,0,,The other notations that you've seen so far
Dialogue: 0,0:08:44.94,0:08:46.67,EN,,0,0,0,,are things like, like
Dialogue: 0,0:08:46.92,0:08:55.24,EN,,0,0,0,,a procedure of arguments x and y and z which do things
Dialogue: 0,0:08:55.71,0:08:57.63,EN,,0,0,0,,and that looks like--
Dialogue: 0,0:09:02.00,0:09:03.61,EN,,0,0,0,,Just looking at the bound variable list,
Dialogue: 0,0:09:04.22,0:09:05.29,EN,,0,0,0,,it looks like this,
Dialogue: 0,0:09:09.93,0:09:17.32,EN,,0,0,0,,x, y, z, and the empty thing.
Dialogue: 0,0:09:18.28,0:09:21.08,EN,,0,0,0,,If I have a list of arguments I wish to match this against,
Dialogue: 0,0:09:22.60,0:09:25.60,EN,,0,0,0,,I have a list of arguments one, two, three,
Dialogue: 0,0:09:25.87,0:09:27.26,EN,,0,0,0,,I want to match these against.
Dialogue: 0,0:09:28.38,0:09:37.10,EN,,0,0,0,,OK? So I might have here a list of three things,
Dialogue: 0,0:09:42.44,0:09:46.94,EN,,0,0,0,,one, two, three.
Dialogue: 0,0:09:48.99,0:09:53.16,EN,,0,0,0,,And I want to match x, y, z against one, two, three.
Dialogue: 0,0:09:54.22,0:09:56.28,EN,,0,0,0,,Well, it's clear that the one matches the x,
Dialogue: 0,0:09:56.32,0:09:58.01,EN,,0,0,0,,because I can just sort of follow the structure,
Dialogue: 0,0:09:58.86,0:10:01.56,EN,,0,0,0,,and the two matches the y,
Dialogue: 0,0:10:02.46,0:10:04.04,EN,,0,0,0,,and the three matches the z.
Dialogue: 0,0:10:05.48,0:10:09.53,EN,,0,0,0,,But now, supposing I were to compare this x dot y.
Dialogue: 0,0:10:09.55,0:10:11.84,EN,,0,0,0,,this is x dot y--
Dialogue: 0,0:10:12.51,0:10:16.91,EN,,0,0,0,,supposing I compare that with a list of three arguments, one, two, three.
Dialogue: 0,0:10:19.08,0:10:20.00,EN,,0,0,0,,Let's look at that again.
Dialogue: 0,0:10:28.00,0:10:30.32,EN,,0,0,0,,One, two, three--
Dialogue: 0,0:10:30.86,0:10:32.88,EN,,0,0,0,,Well, I can walk along here
Dialogue: 0,0:10:32.99,0:10:35.50,EN,,0,0,0,,and say, oh yes, x matches the one,
Dialogue: 0,0:10:37.56,0:10:41.84,EN,,0,0,0,,Ah, the y matches the list, which is two and three.
Dialogue: 0,0:10:43.74,0:10:46.22,EN,,0,0,0,,So the notation I'm choosing here
Dialogue: 0,0:10:46.41,0:10:50.16,EN,,0,0,0,,is one that's very natural for Lisp system.
Dialogue: 0,0:10:52.66,0:10:54.14,EN,,0,0,0,,But I'm going to choose this as a notation
Dialogue: 0,0:10:54.17,0:10:55.80,EN,,0,0,0,,for representing a bunch of arguments.
Dialogue: 0,0:10:58.29,0:11:00.09,EN,,0,0,0,,Now, there's an alternative possibility.
Dialogue: 0,0:11:00.59,0:11:02.78,EN,,0,0,0,,If I don't want to take one special out,
Dialogue: 0,0:11:03.00,0:11:05.00,EN,,0,0,0,,or two special ones out or something like that,
Dialogue: 0,0:11:06.54,0:11:07.56,EN,,0,0,0,,if I don't want to do that,
Dialogue: 0,0:11:08.78,0:11:10.44,EN,,0,0,0,,if I want to talk about
Dialogue: 0,0:11:10.52,0:11:12.52,EN,,0,0,0,,just the list of all the arguments like in addition，
Dialogue: 0,0:11:13.88,0:11:17.96,EN,,0,0,0,,well then the argument list I'm going to choose to be
Dialogue: 0,0:11:18.20,0:11:23.45,EN,,0,0,0,,that procedure of all the arguments x, which does something with x
Dialogue: 0,0:11:25.14,0:11:26.30,EN,,0,0,0,,And which, for example,
Dialogue: 0,0:11:26.81,0:11:27.96,EN,,0,0,0,,if I take the procedure,
Dialogue: 0,0:11:28.06,0:11:30.44,EN,,0,0,0,,which takes all the arguments x
Dialogue: 0,0:11:31.12,0:11:32.70,EN,,0,0,0,,and returned the list of them,
Dialogue: 0,0:11:34.81,0:11:38.67,EN,,0,0,0,,OK? That's list. That's the procedure list.
Dialogue: 0,0:11:45.85,0:11:46.67,EN,,0,0,0,,How does this work?
Dialogue: 0,0:11:46.84,0:11:50.06,EN,,0,0,0,,Well, indeed what I had as the bound variable list in this case,
Dialogue: 0,0:11:50.60,0:11:51.45,EN,,0,0,0,,whatever it is,
Dialogue: 0,0:11:51.61,0:11:53.68,EN,,0,0,0,,is being matched against a list of arguments.
Dialogue: 0,0:11:55.14,0:11:57.14,EN,,0,0,0,,This symbol now is all of the arguments.
Dialogue: 0,0:12:01.49,0:12:05.13,EN,,0,0,0,,And so this is the choice I'm making for a particular syntactic specification,
Dialogue: 0,0:12:05.64,0:12:07.63,EN,,0,0,0,,for the description of procedures
Dialogue: 0,0:12:08.04,0:12:10.56,EN,,0,0,0,,which take indefinite numbers of arguments.
Dialogue: 0,0:12:13.45,0:12:14.60,EN,,0,0,0,,There are two cases of it,
Dialogue: 0,0:12:15.40,0:12:16.35,EN,,0,0,0,,this one and this one.
Dialogue: 0,0:12:17.44,0:12:18.36,EN,,0,0,0,,And none of this.
Dialogue: 0,0:12:18.42,0:12:20.11,EN,,0,0,0,,When you make syntactic specifications,
Dialogue: 0,0:12:20.44,0:12:22.54,EN,,0,0,0,,it's important that it's unambiguous,
Dialogue: 0,0:12:23.56,0:12:27.36,EN,,0,0,0,,that neither of these can be confused with
Dialogue: 0,0:12:27.66,0:12:31.20,EN,,0,0,0,,a representation we already have, this one.
Dialogue: 0,0:12:33.61,0:12:35.82,EN,,0,0,0,,I can always tell whether I have
Dialogue: 0,0:12:36.54,0:12:39.80,EN,,0,0,0,,a fixed number of explicitly named arguments
Dialogue: 0,0:12:40.28,0:12:41.76,EN,,0,0,0,,made by these formal parameters,
Dialogue: 0,0:12:42.64,0:12:43.13,EN,,0,0,0,,or
Dialogue: 0,0:12:43.28,0:12:45.36,EN,,0,0,0,,a fixed number of named formal parameters
Dialogue: 0,0:12:45.44,0:12:48.01,EN,,0,0,0,,followed by a thing which picks up all the rest of them,
Dialogue: 0,0:12:49.42,0:12:53.52,EN,,0,0,0,,or a list of all the arguments
Dialogue: 0,0:12:53.68,0:12:56.52,EN,,0,0,0,,which will be matched against this particular formal parameter called x,
Dialogue: 0,0:12:56.99,0:12:58.84,EN,,0,0,0,,because these are syntactically distinguishable.
Dialogue: 0,0:13:02.25,0:13:04.62,EN,,0,0,0,,Many languages make terrible errors in that form
Dialogue: 0,0:13:05.04,0:13:08.03,EN,,0,0,0,,where whole segments of interpretation are cut off,
Dialogue: 0,0:13:08.64,0:13:13.92,EN,,0,0,0,,because there are syntactic ambiguities in the language.
Dialogue: 0,0:13:14.56,0:13:16.67,EN,,0,0,0,,They are the traditional problems with ALGOL like languages
Dialogue: 0,0:13:16.67,0:13:23.47,EN,,0,0,0,,having to do with the nesting of ifs in the predicate part.
Dialogue: 0,0:13:25.06,0:13:25.93,EN,,0,0,0,,In any case,
Dialogue: 0,0:13:27.52,0:13:29.44,EN,,0,0,0,,now, so I've told you about the syntax,
Dialogue: 0,0:13:30.27,0:13:34.83,EN,,0,0,0,,now, what are we going to do about the semantics of this?
Dialogue: 0,0:13:35.25,0:13:36.11,EN,,0,0,0,,How do we interpret it?
Dialogue: 0,0:13:36.59,0:13:37.96,EN,,0,0,0,,Well this is just super easy.
Dialogue: 0,0:13:38.44,0:13:42.57,EN,,0,0,0,,I'm going to modify the metacircular interpreter to do it.
Dialogue: 0,0:13:43.71,0:13:44.76,EN,,0,0,0,,And that's a one liner.
Dialogue: 0,0:13:45.98,0:13:46.57,EN,,0,0,0,,There it is.
Dialogue: 0,0:13:47.53,0:13:49.56,EN,,0,0,0,,I'm changing the way you pair things up.
Dialogue: 0,0:13:50.81,0:13:54.19,EN,,0,0,0,,OK? Here we have procedure that pairs --
Dialogue: 0,0:13:56.76,0:14:02.03,EN,,0,0,0,,Here's the procedure that pairs the
Dialogue: 0,0:14:04.81,0:14:09.56,EN,,0,0,0,,the variables, the formal parameters, with the arguments that were passed
Dialogue: 0,0:14:12.16,0:14:16.68,EN,,0,0,0,,from the last description of the metacircular interpreter.
Dialogue: 0,0:14:18.96,0:14:21.93,EN,,0,0,0,,And here's some things that are the same as they were before.
Dialogue: 0,0:14:22.67,0:14:23.23,EN,,0,0,0,,In other words,
Dialogue: 0,0:14:23.31,0:14:25.07,EN,,0,0,0,,if the list of variables is empty,
Dialogue: 0,0:14:25.52,0:14:27.31,EN,,0,0,0,,then if the list of values is empty,
Dialogue: 0,0:14:27.45,0:14:29.61,EN,,0,0,0,,then I have an empty list.
Dialogue: 0,0:14:31.05,0:14:33.00,EN,,0,0,0,,Otherwise, I have too many arguments,
Dialogue: 0,0:14:33.98,0:14:40.19,EN,,0,0,0,,If I have, that is if I have empty variables but not empty values.
Dialogue: 0,0:14:41.58,0:14:44.00,EN,,0,0,0,,If I have empty values,
Dialogue: 0,0:14:44.96,0:14:47.47,EN,,0,0,0,,OK? But the variables are not empty,
Dialogue: 0,0:14:47.48,0:14:48.56,EN,,0,0,0,,that I have too few arguments.
Dialogue: 0,0:14:48.94,0:14:51.31,EN,,0,0,0,,However if I have a variable -- the variables are a symbol--
Dialogue: 0,0:14:55.53,0:14:56.49,EN,,0,0,0,,interesting case--
Dialogue: 0,0:14:58.30,0:15:04.40,EN,,0,0,0,,then, what I should do is say, oh yes, this is the special case
Dialogue: 0,0:15:04.59,0:15:06.51,EN,,0,0,0,,that I have a symbolic tail.
Dialogue: 0,0:15:08.35,0:15:14.11,EN,,0,0,0,,OK. I have here a thing just like we looked over here.
Dialogue: 0,0:15:14.90,0:15:17.87,EN,,0,0,0,,This is a tail which is a symbol, y.
Dialogue: 0,0:15:18.63,0:15:19.39,EN,,0,0,0,,It's not a nil.
Dialogue: 0,0:15:20.73,0:15:21.72,EN,,0,0,0,,It's not the empty list.
Dialogue: 0,0:15:23.26,0:15:25.60,EN,,0,0,0,,Here's a symbolic tail that is just the very beginning of the tail.
Dialogue: 0,0:15:25.98,0:15:26.81,EN,,0,0,0,,There is nothing else.
Dialogue: 0,0:15:27.79,0:15:28.72,EN,,0,0,0,,In that case,
Dialogue: 0,0:15:29.96,0:15:37.20,EN,,0,0,0,,I wish to match that variable with all the values
Dialogue: 0,0:15:38.03,0:15:42.52,EN,,0,0,0,,and add that to the pairing that I'm making.
Dialogue: 0,0:15:44.50,0:15:46.91,EN,,0,0,0,,Otherwise, I go through the normal arrangement
Dialogue: 0,0:15:47.15,0:15:48.52,EN,,0,0,0,,of making up the whole pairing.
Dialogue: 0,0:15:52.02,0:15:53.82,EN,,0,0,0,,I suppose that's very simple.
Dialogue: 0,0:15:54.51,0:15:55.84,EN,,0,0,0,,And that's all there is to it.
Dialogue: 0,0:15:57.08,0:15:58.33,EN,,0,0,0,,And now I'll answer some questions.
Dialogue: 0,0:16:02.62,0:16:05.05,EN,,0,0,0,,The first one-- Are there any questions?
Dialogue: 0,0:16:06.60,0:16:06.94,EN,,0,0,0,,Yes?
Dialogue: 0,0:16:07.37,0:16:09.92,EN,,0,0,0,,AUDIENCE: Could you explain that third form?
Dialogue: 0,0:16:09.98,0:16:12.12,EN,,0,0,0,,PROFESSOR: Third form. This one? OK.
Dialogue: 0,0:16:12.59,0:16:14.27,EN,,0,0,0,,Well, maybe we should look at the thing
Dialogue: 0,0:16:14.30,0:16:16.24,EN,,0,0,0,,as a piece of list structure.
Dialogue: 0,0:16:18.57,0:16:22.73,EN,,0,0,0,,This is a procedure which contains a lambda.
Dialogue: 0,0:16:25.85,0:16:29.61,EN,,0,0,0,,I'm just looking at the list structure which represents this.
Dialogue: 0,0:16:31.26,0:16:32.44,EN,,0,0,0,,Here's x.
Dialogue: 0,0:16:32.73,0:16:33.98,EN,,0,0,0,,These are our symbols.
Dialogue: 0,0:16:37.41,0:16:39.58,EN,,0,0,0,,And then the body is nothing but x.
Dialogue: 0,0:16:44.84,0:16:48.75,EN,,0,0,0,,If I were looking for the bound variable list part of this procedure,
Dialogue: 0,0:16:50.09,0:16:51.58,EN,,0,0,0,,I would go looking at the CADR,
Dialogue: 0,0:16:52.14,0:16:53.16,EN,,0,0,0,,and I'd find a symbol.
Dialogue: 0,0:16:54.01,0:16:57.16,EN,,0,0,0,,So the, matcher, which is this pairup thing I just showed you,
Dialogue: 0,0:16:58.24,0:17:00.44,EN,,0,0,0,,is going to be matching a symbolic object
Dialogue: 0,0:17:01.56,0:17:04.40,EN,,0,0,0,,against a list of arguments that were passed.
Dialogue: 0,0:17:05.76,0:17:09.55,EN,,0,0,0,,And it will bind that symbol to the list of arguments.
Dialogue: 0,0:17:11.37,0:17:16.48,EN,,0,0,0,,The -- In this case, if I'm looking for it,
Dialogue: 0,0:17:16.92,0:17:20.97,EN,,0,0,0,,the match will be against this in the bound variable list position.
Dialogue: 0,0:17:24.14,0:17:26.14,EN,,0,0,0,,Now, if what this does is
Dialogue: 0,0:17:26.17,0:17:29.13,EN,,0,0,0,,it gets a list of arguments and returns it, that's list
Dialogue: 0,0:17:30.40,0:17:31.39,EN,,0,0,0,,That's the procedure is.
Dialogue: 0,0:17:34.51,0:17:35.48,EN,,0,0,0,,Oh well, thank you.
Dialogue: 0,0:17:36.14,0:17:37.28,EN,,0,0,0,,Let's take a break.
Dialogue: 0,0:17:37.83,0:17:55.36,EN,,0,0,0,,[JESU, JOY OF MAN'S DESIRING]
Dialogue: 0,0:17:55.36,0:17:59.02,EN,,0,0,0,,
Dialogue: 0,0:18:03.53,0:18:07.56,EN,,0,0,0,,
Dialogue: 0,0:18:07.56,0:18:11.69,EN,,0,0,0,,
Dialogue: 0,0:18:12.25,0:18:16.11,EN,,0,0,0,,
Dialogue: 0,0:18:20.86,0:18:21.61,EN,,0,0,0,,PROFESSOR: Well let's see.
Dialogue: 0,0:18:23.26,0:18:26.32,EN,,0,0,0,,Now, I'm going to tell you about a rather more substantial variation
Dialogue: 0,0:18:27.45,0:18:31.04,EN,,0,0,0,,one that's a famous variation
Dialogue: 0,0:18:31.60,0:18:36.80,EN,,0,0,0,,hat many early Lisps had.
Dialogue: 0,0:18:38.25,0:18:40.06,EN,,0,0,0,,It's called dynamic binding of variables.
Dialogue: 0,0:18:41.77,0:18:44.68,EN,,0,0,0,,And we'll investigate a little bit about that right now.
Dialogue: 0,0:18:47.62,0:18:50.16,EN,,0,0,0,,I'm going to first introduce this by showing you the sort of thing
Dialogue: 0,0:18:50.35,0:18:52.36,EN,,0,0,0,,that would make someone want this idea.
Dialogue: 0,0:18:53.74,0:18:55.23,EN,,0,0,0,,I'm not going to tell what it is yet,
Dialogue: 0,0:18:55.40,0:18:57.60,EN,,0,0,0,,I'm going to show you why you might want it.
Dialogue: 0,0:18:58.64,0:18:59.93,EN,,0,0,0,,Suppose, for example,
Dialogue: 0,0:19:00.75,0:19:02.59,EN,,0,0,0,,we looked at the sum procedure again
Dialogue: 0,0:19:05.02,0:19:06.43,EN,,0,0,0,,for summing up a bunch of things.
Dialogue: 0,0:19:08.14,0:19:09.47,EN,,0,0,0,,To be that procedure,
Dialogue: 0,0:19:09.60,0:19:10.78,EN,,0,0,0,,of a term,
Dialogue: 0,0:19:13.04,0:19:14.41,EN,,0,0,0,,lower bound,
Dialogue: 0,0:19:15.24,0:19:17.04,EN,,0,0,0,,method of computing the next index,
Dialogue: 0,0:19:17.24,0:19:18.56,EN,,0,0,0,,and upper bound,
Dialogue: 0,0:19:19.36,0:19:20.16,EN,,0,0,0,,such that,
Dialogue: 0,0:19:23.16,0:19:26.94,EN,,0,0,0,,if a is greater than b
Dialogue: 0,0:19:27.15,0:19:28.64,EN,,0,0,0,,then the result is 0,
Dialogue: 0,0:19:30.24,0:19:31.08,EN,,0,0,0,,otherwise,
Dialogue: 0,0:19:33.68,0:19:39.82,EN,,0,0,0,,it's the sum, of the term, procedure, applied to a
Dialogue: 0,0:19:40.60,0:19:44.24,EN,,0,0,0,,and the result of adding up, terms,
Dialogue: 0,0:19:47.68,0:19:52.64,EN,,0,0,0,,with the next a being the a,
Dialogue: 0,0:20:00.30,0:20:03.56,EN,,0,0,0,,the next procedure passed along,
Dialogue: 0,0:20:06.40,0:20:08.25,EN,,0,0,0,,and the upper bound being passed along.
Dialogue: 0,0:20:14.51,0:20:15.76,EN,,0,0,0,,Blink, blink, blink--
Dialogue: 0,0:20:17.82,0:20:21.45,EN,,0,0,0,,OK? Now, when I use this sum procedure,
Dialogue: 0,0:20:21.96,0:20:24.35,EN,,0,0,0,,I can use it, for example, like this.
Dialogue: 0,0:20:25.45,0:20:38.04,EN,,0,0,0,,We can define the sum of the powers to be,
Dialogue: 0,0:20:38.08,0:20:40.33,EN,,0,0,0,,for example, sum of a bunch of powers x to the n,
Dialogue: 0,0:20:41.10,0:20:45.93,EN,,0,0,0,,to be that procedure of a, b, and n--
Dialogue: 0,0:20:45.95,0:20:47.69,EN,,0,0,0,,lower bound, the upper bound, and n--
Dialogue: 0,0:20:48.06,0:20:53.34,EN,,0,0,0,,which is sum, of lambda of x,
Dialogue: 0,0:20:53.60,0:20:59.31,EN,,0,0,0,,the procedure of one argument x, which exponentiates x to the n,
Dialogue: 0,0:21:02.19,0:21:09.29,EN,,0,0,0,,with the a, the incrementer, and b, being passed along.
Dialogue: 0,0:21:11.82,0:21:15.76,EN,,0,0,0,,So we're adding up x to n, given an x.
Dialogue: 0,0:21:16.14,0:21:19.74,EN,,0,0,0,,x takes on values from a to b, incrementing by one.
Dialogue: 0,0:21:22.94,0:21:24.38,EN,,0,0,0,,I can also write the--
Dialogue: 0,0:21:27.68,0:21:28.20,EN,,0,0,0,,That's right.
Dialogue: 0,0:21:29.78,0:21:31.02,EN,,0,0,0,,Product, excuse me.
Dialogue: 0,0:21:31.91,0:21:33.36,EN,,0,0,0,,The product of a bunch of powers.
Dialogue: 0,0:21:38.08,0:21:39.12,EN,,0,0,0,,It's a strange name.
Dialogue: 0,0:21:40.02,0:21:40.80,EN,,0,0,0,,I'm going to leave it there.
Dialogue: 0,0:21:41.96,0:21:46.32,EN,,0,0,0,,Weird-- OK? I write up what I have.
Dialogue: 0,0:21:49.34,0:21:50.19,EN,,0,0,0,,I'm sure that's right.
Dialogue: 0,0:21:51.37,0:21:53.82,EN,,0,0,0,,And if I want the product of a bunch of powers--
Dialogue: 0,0:21:58.41,0:22:02.36,EN,,0,0,0,,That was 12 brain cells, that double-take.
Dialogue: 0,0:22:03.00,0:22:06.81,EN,,0,0,0,,I can for example use the procedure which is like sum,
Dialogue: 0,0:22:06.81,0:22:08.22,EN,,0,0,0,,which is for making products,
Dialogue: 0,0:22:08.56,0:22:11.05,EN,,0,0,0,,but it's similar to that, that you've seen before.
Dialogue: 0,0:22:11.45,0:22:16.38,EN,,0,0,0,,There's a procedure of three arguments again.
Dialogue: 0,0:22:17.00,0:22:25.42,EN,,0,0,0,,Which is the product of terms that are constructed, or factors in this case,
Dialogue: 0,0:22:25.66,0:22:31.60,EN,,0,0,0,,constructed from exponentiating x to the n,
Dialogue: 0,0:22:34.43,0:22:37.85,EN,,0,0,0,,where I start with a, I increment, and I go to b.
Dialogue: 0,0:22:41.53,0:22:41.88,EN,,0,0,0,,Now,
Dialogue: 0,0:22:46.83,0:22:49.50,EN,,0,0,0,,there's some sort of thing here that should disturb you immediately.
Dialogue: 0,0:22:50.75,0:22:52.01,EN,,0,0,0,,These look the same.
Dialogue: 0,0:22:53.18,0:22:55.20,EN,,0,0,0,,Why am I writing this code so many times?
Dialogue: 0,0:22:56.59,0:22:59.72,EN,,0,0,0,,Here I am, in the same boat I've been in before.
Dialogue: 0,0:23:01.00,0:23:03.15,EN,,0,0,0,,Right? Wouldn't it be nice to make an abstraction here?
Dialogue: 0,0:23:03.81,0:23:05.76,EN,,0,0,0,,What's an example of a good abstraction to make?
Dialogue: 0,0:23:05.85,0:23:07.55,EN,,0,0,0,,Well, I see some codes that's identical.
Dialogue: 0,0:23:08.47,0:23:09.32,EN,,0,0,0,,Here's one,
Dialogue: 0,0:23:09.98,0:23:11.08,EN,,0,0,0,,and here's another.
Dialogue: 0,0:23:14.45,0:23:16.22,EN,,0,0,0,,And so maybe I should be able to pull that out.
Dialogue: 0,0:23:17.09,0:23:19.23,EN,,0,0,0,,I should be able to say, oh yes,
Dialogue: 0,0:23:20.51,0:23:22.67,EN,,0,0,0,,the sum of the powers could be written in terms of
Dialogue: 0,0:23:22.88,0:23:24.52,EN,,0,0,0,,something called the nth power procedure.
Dialogue: 0,0:23:25.71,0:23:27.40,EN,,0,0,0,,Imagine somebody wanted to write
Dialogue: 0,0:23:27.74,0:23:30.03,EN,,0,0,0,,a slightly different procedure that looks like this.
Dialogue: 0,0:23:37.63,0:23:45.18,EN,,0,0,0,,The sum powers to be a procedure
Dialogue: 0,0:23:46.44,0:23:48.46,EN,,0,0,0,,of a, b, and n,
Dialogue: 0,0:23:48.75,0:23:52.27,EN,,0,0,0,,which the result of summing up the nth power.
Dialogue: 0,0:23:53.88,0:23:55.42,EN,,0,0,0,,We're going to give a name to that idea,
Dialogue: 0,0:23:58.35,0:24:02.27,EN,,0,0,0,,for starting at a, going by one, and ending at b.
Dialogue: 0,0:24:05.74,0:24:06.91,EN,,0,0,0,,And similarly,
Dialogue: 0,0:24:10.65,0:24:12.76,EN,,0,0,0,,I might want to write the product powers this way,
Dialogue: 0,0:24:12.89,0:24:15.24,EN,,0,0,0,,abstracting out this idea.
Dialogue: 0,0:24:16.27,0:24:17.37,EN,,0,0,0,,I might want this.
Dialogue: 0,0:24:22.10,0:24:23.02,EN,,0,0,0,,Product powers,
Dialogue: 0,0:24:29.48,0:24:34.94,EN,,0,0,0,,to be a procedure of a, b, and n,
Dialogue: 0,0:24:35.31,0:24:42.33,EN,,0,0,0,,which is the product of the nth power operation
Dialogue: 0,0:24:46.44,0:24:50.30,EN,,0,0,0,,on a with the incrementation and b being
Dialogue: 0,0:24:53.50,0:24:57.56,EN,,0,0,0,,being my arguments for the analogous-thing product.
Dialogue: 0,0:24:58.38,0:25:00.24,EN,,0,0,0,,And I'd like to be able to define,
Dialogue: 0,0:25:02.04,0:25:03.88,EN,,0,0,0,,I'd like to be able to define nth power--
Dialogue: 0,0:25:04.89,0:25:05.93,EN,,0,0,0,,I'll put it over here.
Dialogue: 0,0:25:12.22,0:25:12.99,EN,,0,0,0,,I'll put it at the top.
Dialogue: 0,0:25:25.41,0:25:29.04,EN,,0,0,0,,--to be, in fact, my procedure of one argument x
Dialogue: 0,0:25:29.60,0:25:34.56,EN,,0,0,0,,which is the result of exponentiating x to the n.
Dialogue: 0,0:25:35.93,0:25:36.96,EN,,0,0,0,,But I have a problem.
Dialogue: 0,0:25:38.64,0:25:39.93,EN,,0,0,0,,My environment model,
Dialogue: 0,0:25:40.57,0:25:43.23,EN,,0,0,0,,that is my means of interpretation
Dialogue: 0,0:25:44.00,0:25:45.95,EN,,0,0,0,,of interpretation for the language that we've defined so far,
Dialogue: 0,0:25:46.27,0:25:48.81,EN,,0,0,0,,does not give me a meaning for this n.
Dialogue: 0,0:25:52.76,0:25:59.26,EN,,0,0,0,,Because, as you know, the, as you know
Dialogue: 0,0:26:00.76,0:26:04.25,EN,,0,0,0,,this n is free in this procedure.
Dialogue: 0,0:26:06.41,0:26:07.98,EN,,0,0,0,,The environment model tells us
Dialogue: 0,0:26:08.60,0:26:10.20,EN,,0,0,0,,that the meaning of a free variable
Dialogue: 0,0:26:11.21,0:26:14.99,EN,,0,0,0,,is determined in the environment in which this procedure is defined.
Dialogue: 0,0:26:16.64,0:26:17.47,EN,,0,0,0,,In a way I have written it,
Dialogue: 0,0:26:17.48,0:26:19.84,EN,,0,0,0,,assuming these things are defined on the blackboard as is,
Dialogue: 0,0:26:21.64,0:26:23.63,EN,,0,0,0,,this is defined in the global environment,
Dialogue: 0,0:26:24.06,0:26:25.15,EN,,0,0,0,,where there is no n.
Dialogue: 0,0:26:25.93,0:26:27.63,EN,,0,0,0,,Therefore, n is unbound variable.
Dialogue: 0,0:26:28.72,0:26:31.66,EN,,0,0,0,,But it's perfectly clear, to most of us,
Dialogue: 0,0:26:32.60,0:26:36.32,EN,,0,0,0,,that we would like it to be this n and this n.
Dialogue: 0,0:26:38.99,0:26:42.67,EN,,0,0,0,,On the other hand, OK, it would be nice.
Dialogue: 0,0:26:42.84,0:26:44.28,EN,,0,0,0,,Certainly we've got to be careful here
Dialogue: 0,0:26:44.56,0:26:46.06,EN,,0,0,0,,of keeping this to be this,
Dialogue: 0,0:26:48.96,0:26:52.83,EN,,0,0,0,,and this one over here, wherever it is to be this one.
Dialogue: 0,0:26:57.39,0:26:59.74,EN,,0,0,0,,Well, the desire to make this work
Dialogue: 0,0:27:00.67,0:27:02.72,EN,,0,0,0,,has led to a very famous bug.
Dialogue: 0,0:27:04.65,0:27:06.04,EN,,0,0,0,,I'll tell you about the famous bug.
Dialogue: 0,0:27:07.15,0:27:09.40,EN,,0,0,0,,Look at this slide.
Dialogue: 0,0:27:10.66,0:27:12.70,EN,,0,0,0,,This is an idea called dynamic binding.
Dialogue: 0,0:27:13.99,0:27:16.91,EN,,0,0,0,,Where, instead of the free variable being interpreted
Dialogue: 0,0:27:17.76,0:27:21.23,EN,,0,0,0,,in the environment of definition of a procedure,
Dialogue: 0,0:27:22.40,0:27:25.16,EN,,0,0,0,,the free variable is interpreted as having its value
Dialogue: 0,0:27:25.44,0:27:29.31,EN,,0,0,0,,in the environment of the caller of the procedure.
Dialogue: 0,0:27:31.85,0:27:34.84,EN,,0,0,0,,So what you have is a system
Dialogue: 0,0:27:34.86,0:27:39.68,EN,,0,0,0,,where you search up the chain of callers of a particular procedure,
Dialogue: 0,0:27:40.43,0:27:42.65,EN,,0,0,0,,and, of course, in this case,
Dialogue: 0,0:27:42.84,0:27:44.30,EN,,0,0,0,,since nth power is called
Dialogue: 0,0:27:44.33,0:27:45.98,EN,,0,0,0,,from inside product whatever it is--
Dialogue: 0,0:27:46.41,0:27:48.68,EN,,0,0,0,,I had to write our own sum which is the analogous procedure--
Dialogue: 0,0:27:50.51,0:27:54.92,EN,,0,0,0,,and product is presumably called from product powers,
Dialogue: 0,0:27:55.13,0:27:56.14,EN,,0,0,0,,as you see over here,
Dialogue: 0,0:27:56.83,0:27:59.37,EN,,0,0,0,,then since product powers bind with variable n ,
Dialogue: 0,0:28:00.09,0:28:04.09,EN,,0,0,0,,then nth powers n would be derived through that chain.
Dialogue: 0,0:28:08.14,0:28:09.64,EN,,0,0,0,,Similarly, this n,
Dialogue: 0,0:28:10.11,0:28:12.01,EN,,0,0,0,,the nth power in n in this case,
Dialogue: 0,0:28:12.32,0:28:15.80,EN,,0,0,0,,would come through nth power here being called from inside sum.
Dialogue: 0,0:28:15.80,0:28:18.27,EN,,0,0,0,,You can see it being called from inside sum here.
Dialogue: 0,0:28:20.73,0:28:21.69,EN,,0,0,0,,It's called term here.
Dialogue: 0,0:28:22.90,0:28:25.72,EN,,0,0,0,,But sum was called from inside of sum powers,
Dialogue: 0,0:28:26.94,0:28:27.96,EN,,0,0,0,,which bound n.
Dialogue: 0,0:28:28.93,0:28:30.65,EN,,0,0,0,,Therefore, there would be an n available
Dialogue: 0,0:28:32.75,0:28:36.11,EN,,0,0,0,,that n to get it's value from.
Dialogue: 0,0:28:37.95,0:28:39.24,EN,,0,0,0,,This is called dynamic --
Dialogue: 0,0:28:39.28,0:28:43.10,EN,,0,0,0,,What we have below this white line plus over here
Dialogue: 0,0:28:43.31,0:28:46.04,EN,,0,0,0,,is what's called a dynamic binding view of the world.
Dialogue: 0,0:28:46.59,0:28:49.00,EN,,0,0,0,,If that works, that's a dynamic binding view.
Dialogue: 0,0:28:50.85,0:28:52.65,EN,,0,0,0,,Now, let's take a look, for example,
Dialogue: 0,0:28:54.54,0:28:55.99,EN,,0,0,0,,at just what it takes to implement that.
Dialogue: 0,0:28:55.99,0:28:56.96,EN,,0,0,0,,That's real easy.
Dialogue: 0,0:28:57.48,0:28:59.34,EN,,0,0,0,,In fact, the very first Lisps
Dialogue: 0,0:29:00.01,0:29:02.52,EN,,0,0,0,,had any form of interpretations of the free variables at all,
Dialogue: 0,0:29:03.31,0:29:05.98,EN,,0,0,0,,had dynamic binding interpretations for the free variables.
Dialogue: 0,0:29:06.40,0:29:10.14,EN,,0,0,0,,APL has dynamic binding interpretation for the free variables,
Dialogue: 0,0:29:11.68,0:29:14.32,EN,,0,0,0,,not lexical or static binding.
Dialogue: 0,0:29:15.22,0:29:17.00,EN,,0,0,0,,So, of course, the change is in eval.
Dialogue: 0,0:29:19.31,0:29:20.59,EN,,0,0,0,,And it's really in two places.
Dialogue: 0,0:29:22.78,0:29:25.61,EN,,0,0,0,,First of all, one thing we see,
Dialogue: 0,0:29:26.52,0:29:28.49,EN,,0,0,0,,is that things become a little simpler.
Dialogue: 0,0:29:29.39,0:29:33.63,EN,,0,0,0,,If I don't have to have the -- If I don't have to have the
Dialogue: 0,0:29:33.64,0:29:36.20,EN,,0,0,0,,environment be the environment of definition for procedure,
Dialogue: 0,0:29:36.44,0:29:38.04,EN,,0,0,0,,the procedure need not capture
Dialogue: 0,0:29:38.43,0:29:40.17,EN,,0,0,0,,the environment at the time it's defined.
Dialogue: 0,0:29:42.03,0:29:44.96,EN,,0,0,0,,And so if we look here at this slide,
Dialogue: 0,0:29:45.84,0:29:50.08,EN,,0,0,0,,we see that the clause for a lambda expression,
Dialogue: 0,0:29:50.73,0:29:52.43,EN,,0,0,0,,which is the way a procedure is defined,
Dialogue: 0,0:29:53.92,0:29:56.73,EN,,0,0,0,,does not make up a thing which has a type closure
Dialogue: 0,0:29:56.75,0:30:01.05,EN,,0,0,0,,and a attached environment structure.
Dialogue: 0,0:30:01.29,0:30:02.54,EN,,0,0,0,,It's just the expression itself.
Dialogue: 0,0:30:02.54,0:30:04.76,EN,,0,0,0,,And we'll decompose that some other way somewhere else.
Dialogue: 0,0:30:06.44,0:30:09.40,EN,,0,0,0,,The other thing we see is the applicator
Dialogue: 0,0:30:10.36,0:30:13.69,EN,,0,0,0,,applicator must be able to get the environment of the caller.
Dialogue: 0,0:30:14.29,0:30:17.24,EN,,0,0,0,,The caller of a procedure is right here.
Dialogue: 0,0:30:17.26,0:30:19.45,EN,,0,0,0,,If the procedure is a application--
Dialogue: 0,0:30:19.56,0:30:21.63,EN,,0,0,0,,If the expression we're evaluating is a combination,
Dialogue: 0,0:30:21.79,0:30:23.71,EN,,0,0,0,,then we're going to call a combination
Dialogue: 0,0:30:23.93,0:30:25.50,EN,,0,0,0,,then we're going to call a procedure
Dialogue: 0,0:30:25.66,0:30:27.37,EN,,0,0,0,,which is the value of the operator.
Dialogue: 0,0:30:29.84,0:30:31.44,EN,,0,0,0,,The environment of the caller
Dialogue: 0,0:30:31.98,0:30:34.51,EN,,0,0,0,,is the environment we have right here, available now.
Dialogue: 0,0:30:35.89,0:30:40.72,EN,,0,0,0,,So all I have to do is pass that environment to the applicator, to apply.
Dialogue: 0,0:30:41.49,0:30:42.75,EN,,0,0,0,,And if we look at that here,
Dialogue: 0,0:30:43.58,0:30:44.97,EN,,0,0,0,,the only change we have to make
Dialogue: 0,0:30:45.71,0:30:48.41,EN,,0,0,0,,is that fellow takes that environment
Dialogue: 0,0:30:48.78,0:30:55.68,EN,,0,0,0,,uses that environment for the purpose of extending that environment
Dialogue: 0,0:30:56.67,0:30:59.02,EN,,0,0,0,,when abiding the formal parameters
Dialogue: 0,0:30:59.02,0:31:01.37,EN,,0,0,0,,of the procedure to the arguments that were passed,
Dialogue: 0,0:31:03.08,0:31:05.98,EN,,0,0,0,,not an environment that was captured in the procedure.
Dialogue: 0,0:31:06.81,0:31:09.45,EN,,0,0,0,,The reason why the first Lisps were implemented this way,
Dialogue: 0,0:31:09.66,0:31:11.96,EN,,0,0,0,,is the sort of the obvious, accidental implementation.
Dialogue: 0,0:31:14.13,0:31:16.68,EN,,0,0,0,,And, of course, as usual, people got used to it and liked it.
Dialogue: 0,0:31:17.25,0:31:18.27,EN,,0,0,0,,And there were some people said,
Dialogue: 0,0:31:18.40,0:31:19.50,EN,,0,0,0,,this is the way to do it.
Dialogue: 0,0:31:21.59,0:31:24.09,EN,,0,0,0,,Unfortunately that causes some serious problems.
Dialogue: 0,0:31:25.40,0:31:27.24,EN,,0,0,0,,The most important, serious problem
Dialogue: 0,0:31:27.53,0:31:29.84,EN,,0,0,0,,in using dynamic binding
Dialogue: 0,0:31:31.00,0:31:33.56,EN,,0,0,0,,is there's a modularity crisis that's involved it.
Dialogue: 0,0:31:35.46,0:31:37.66,EN,,0,0,0,,If two people are working together on some big system,
Dialogue: 0,0:31:38.57,0:31:40.01,EN,,0,0,0,,then an important thing to one
Dialogue: 0,0:31:40.35,0:31:42.19,EN,,0,0,0,,is that the names used by each one
Dialogue: 0,0:31:42.99,0:31:44.58,EN,,0,0,0,,don't interfere with the names of the other.
Dialogue: 0,0:31:47.93,0:31:50.78,EN,,0,0,0,,It's important that when I invent some segment of code
Dialogue: 0,0:31:51.07,0:31:53.13,EN,,0,0,0,,that no one can make my code stop working
Dialogue: 0,0:31:53.88,0:31:56.57,EN,,0,0,0,,by using my names that I use internal to my code,
Dialogue: 0,0:31:56.75,0:31:57.71,EN,,0,0,0,,internal to his code.
Dialogue: 0,0:31:59.85,0:32:00.46,EN,,0,0,0,,However,
Dialogue: 0,0:32:01.04,0:32:05.18,EN,,0,0,0,,dynamic binding violates that particular modularity constraint in a clear way.
Dialogue: 0,0:32:06.67,0:32:08.08,EN,,0,0,0,,Consider, for example,
Dialogue: 0,0:32:09.18,0:32:10.35,EN,,0,0,0,,what happens over here.
Dialogue: 0,0:32:12.54,0:32:13.79,EN,,0,0,0,,Suppose it was the case
Dialogue: 0,0:32:15.47,0:32:19.81,EN,,0,0,0,,that I decided to change the word next.
Dialogue: 0,0:32:19.81,0:32:24.41,EN,,0,0,0,,Supposing somebody is writing, somebody is writing sum,
Dialogue: 0,0:32:25.10,0:32:26.68,EN,,0,0,0,,and somebody else is going to use sum.
Dialogue: 0,0:32:28.97,0:32:30.32,EN,,0,0,0,,The writer of sum
Dialogue: 0,0:32:30.49,0:32:32.30,EN,,0,0,0,,has a choice of what names he may use.
Dialogue: 0,0:32:33.66,0:32:34.84,EN,,0,0,0,,Let's say, I'm that writer.
Dialogue: 0,0:32:36.83,0:32:39.30,EN,,0,0,0,,Well, by gosh, just happens I didn't want to call this next.
Dialogue: 0,0:32:39.30,0:32:40.09,EN,,0,0,0,,I called it n.
Dialogue: 0,0:32:41.74,0:32:43.10,EN,,0,0,0,,So all places where you see next,
Dialogue: 0,0:32:44.28,0:32:45.26,EN,,0,0,0,,I called it n.
Dialogue: 0,0:32:48.14,0:32:48.48,EN,,0,0,0,,Whoops.
Dialogue: 0,0:32:49.94,0:32:52.22,EN,,0,0,0,,I changed nothing about the specifications of this program,
Dialogue: 0,0:32:53.32,0:32:54.86,EN,,0,0,0,,but this program stops working.
Dialogue: 0,0:32:56.11,0:32:57.96,EN,,0,0,0,,Not only that, unfortunately, this one does too.
Dialogue: 0,0:32:59.50,0:33:01.40,EN,,0,0,0,,Why do these programs stop working?
Dialogue: 0,0:33:02.26,0:33:03.24,EN,,0,0,0,,Well, it's sort of clear.
Dialogue: 0,0:33:04.48,0:33:09.29,EN,,0,0,0,,Instead of chasing out the value of the n
Dialogue: 0,0:33:09.31,0:33:13.72,EN,,0,0,0,,that occurs in nth power over here or over here,
Dialogue: 0,0:33:14.97,0:33:17.16,EN,,0,0,0,,through the environment of definition,
Dialogue: 0,0:33:17.20,0:33:19.58,EN,,0,0,0,,where this one is always linked to this one,
Dialogue: 0,0:33:19.87,0:33:21.48,EN,,0,0,0,,if it was through the environment of definition,
Dialogue: 0,0:33:21.55,0:33:23.63,EN,,0,0,0,,because here is the definition.
Dialogue: 0,0:33:24.37,0:33:26.25,EN,,0,0,0,,This lambda expression was executed
Dialogue: 0,0:33:26.59,0:33:28.59,EN,,0,0,0,,in the environment where that n was defined.
Dialogue: 0,0:33:30.70,0:33:31.84,EN,,0,0,0,,If instead of doing that,
Dialogue: 0,0:33:32.01,0:33:33.68,EN,,0,0,0,,I have to chase through the call chain,
Dialogue: 0,0:33:34.78,0:33:36.27,EN,,0,0,0,,then look what horrible thing happens.
Dialogue: 0,0:33:37.32,0:33:41.18,EN,,0,0,0,,Well, this was called from inside sum as term, term a.
Dialogue: 0,0:33:41.76,0:33:42.38,EN,,0,0,0,,term a.
Dialogue: 0,0:33:44.78,0:33:46.19,EN,,0,0,0,,I'm looking for a value of n.
Dialogue: 0,0:33:47.35,0:33:48.40,EN,,0,0,0,,Instead of getting this one,
Dialogue: 0,0:33:48.84,0:33:49.76,EN,,0,0,0,,I get that one.
Dialogue: 0,0:33:50.70,0:33:52.54,EN,,0,0,0,,So by changing the insides of this program,
Dialogue: 0,0:33:52.86,0:33:54.09,EN,,0,0,0,,this program stops working.
Dialogue: 0,0:33:56.77,0:34:00.08,EN,,0,0,0,,So I no longer have a quantifier, as I described before.
Dialogue: 0,0:34:01.12,0:34:05.13,EN,,0,0,0,,Which is a symbol -- The lambda symbol is supposed to be a quantifier.
Dialogue: 0,0:34:05.43,0:34:06.70,EN,,0,0,0,,A thing which has the property
Dialogue: 0,0:34:06.89,0:34:11.42,EN,,0,0,0,,that the names that are bound by it are unimportant,
Dialogue: 0,0:34:12.65,0:34:15.71,EN,,0,0,0,,that I can uniformly substitute any names for these
Dialogue: 0,0:34:16.92,0:34:19.98,EN,,0,0,0,,throughout this thing, so long as they don't occur in here, the new names,
Dialogue: 0,0:34:20.94,0:34:23.16,EN,,0,0,0,,and the meaning of this expression should remain unchanged.
Dialogue: 0,0:34:24.04,0:34:25.50,EN,,0,0,0,,I've just changed the meaning of the expression
Dialogue: 0,0:34:25.53,0:34:27.20,EN,,0,0,0,,by changing the one of the names.
Dialogue: 0,0:34:28.69,0:34:30.89,EN,,0,0,0,,So lambda is no longer a well defined idea.
Dialogue: 0,0:34:32.17,0:34:33.37,EN,,0,0,0,,It's a very serious problem.
Dialogue: 0,0:34:34.55,0:34:35.55,EN,,0,0,0,,So for that reason,
Dialogue: 0,0:34:36.64,0:34:42.51,EN,,0,0,0,,I and my buddies have given up this particular kind of abstraction,
Dialogue: 0,0:34:43.13,0:34:44.36,EN,,0,0,0,,which I would like to have,
Dialogue: 0,0:34:45.61,0:34:47.50,EN,,0,0,0,,in favor of a modularity principle.
Dialogue: 0,0:34:48.09,0:34:50.20,EN,,0,0,0,,But this is the kind of experiment you can do
Dialogue: 0,0:34:51.96,0:34:53.68,EN,,0,0,0,,if you want to play with these interpreters.
Dialogue: 0,0:34:54.83,0:34:56.91,EN,,0,0,0,,You can try them out this way, that way, and the other way.
Dialogue: 0,0:34:58.11,0:35:00.25,EN,,0,0,0,,You see what makes a nicer language.
Dialogue: 0,0:35:02.68,0:35:04.49,EN,,0,0,0,,So that's a very important thing to be able to do.
Dialogue: 0,0:35:04.99,0:35:06.68,EN,,0,0,0,,Now, I would like to give you a feeling
Dialogue: 0,0:35:06.72,0:35:08.49,EN,,0,0,0,,for I think the right thing to do is here.
Dialogue: 0,0:35:09.32,0:35:12.91,EN,,0,0,0,,How are you going to, how are you going to I get this kind of
Dialogue: 0,0:35:13.04,0:35:15.34,EN,,0,0,0,,of power in a lexical system?
Dialogue: 0,0:35:16.28,0:35:17.39,EN,,0,0,0,,And the answer is, of course,
Dialogue: 0,0:35:17.55,0:35:20.03,EN,,0,0,0,,what I really want is a something that makes up for me
Dialogue: 0,0:35:20.68,0:35:22.60,EN,,0,0,0,,an exponentiator for a particular n.
Dialogue: 0,0:35:23.69,0:35:24.28,EN,,0,0,0,,Given an n,
Dialogue: 0,0:35:24.32,0:35:25.66,EN,,0,0,0,,it will make me an exponentiator.
Dialogue: 0,0:35:26.28,0:35:27.40,EN,,0,0,0,,Oh, but that's easy too.
Dialogue: 0,0:35:28.17,0:35:30.57,EN,,0,0,0,,In other words, I can write my program this way.
Dialogue: 0,0:35:35.84,0:35:37.84,EN,,0,0,0,,I'm going to define a thing called PGEN,
Dialogue: 0,0:35:40.25,0:35:42.54,EN,,0,0,0,,which is a procedure of n
Dialogue: 0,0:35:43.16,0:35:45.95,EN,,0,0,0,,which produces for me an exponentiator.
Dialogue: 0,0:35:50.24,0:35:51.23,EN,,0,0,0,,--x to the n.
Dialogue: 0,0:35:56.80,0:35:57.98,EN,,0,0,0,,Given that I have that,
Dialogue: 0,0:35:58.59,0:36:00.88,EN,,0,0,0,,then I can capture the abstraction I wanted
Dialogue: 0,0:36:01.42,0:36:03.93,EN,,0,0,0,,even better, because now it's encapsulated in a way
Dialogue: 0,0:36:04.09,0:36:06.60,EN,,0,0,0,,where I can't be destroyed by a change of names.
Dialogue: 0,0:36:07.89,0:36:12.35,EN,,0,0,0,,I can define some powers
Dialogue: 0,0:36:17.28,0:36:20.70,EN,,0,0,0,,I can define some powers to be a procedure again of a, b, and n
Dialogue: 0,0:36:21.61,0:36:26.83,EN,,0,0,0,,which is the sum of the term function
Dialogue: 0,0:36:26.88,0:36:32.32,EN,,0,0,0,,generated by using this generator, PGEN, n,
Dialogue: 0,0:36:34.40,0:36:38.01,EN,,0,0,0,,with a, incrementer, and b.
Dialogue: 0,0:36:42.49,0:36:47.95,EN,,0,0,0,,And I can define the product of powers
Dialogue: 0,0:36:54.11,0:36:58.84,EN,,0,0,0,,to be a procedure of a, b, and n
Dialogue: 0,0:36:59.80,0:37:09.96,EN,,0,0,0,,which is the product PGEN, n, with a, increment, and b.
Dialogue: 0,0:37:11.28,0:37:13.28,EN,,0,0,0,,Now, of course, this is a very simple example
Dialogue: 0,0:37:13.60,0:37:16.35,EN,,0,0,0,,where this object that I'm trying to abstract over is small.
Dialogue: 0,0:37:17.28,0:37:18.83,EN,,0,0,0,,But it could be a 100 lines of code.
Dialogue: 0,0:37:20.10,0:37:23.67,EN,,0,0,0,,And so, the purpose of this is, of course, to make it simple.
Dialogue: 0,0:37:23.67,0:37:24.57,EN,,0,0,0,,I'd give a name to it,
Dialogue: 0,0:37:24.73,0:37:26.94,EN,,0,0,0,,it's just that here it's a parameterized name.
Dialogue: 0,0:37:28.20,0:37:30.27,EN,,0,0,0,,It's a name that depends upon, explicitly,
Dialogue: 0,0:37:30.49,0:37:33.63,EN,,0,0,0,,the lexically apparent value of n.
Dialogue: 0,0:37:37.13,0:37:38.59,EN,,0,0,0,,So you can think of this as a long name.
Dialogue: 0,0:37:40.21,0:37:41.58,EN,,0,0,0,,And here, I've solved my problem
Dialogue: 0,0:37:41.76,0:37:45.82,EN,,0,0,0,,by naming my... by naming the term generation
Dialogue: 0,0:37:46.12,0:37:49.22,EN,,0,0,0,,procedures within an n in them.
Dialogue: 0,0:37:55.08,0:37:55.87,EN,,0,0,0,,Are there any questions?
Dialogue: 0,0:37:57.00,0:37:58.38,EN,,0,0,0,,Oh, yes, David.
Dialogue: 0,0:37:58.57,0:38:02.27,EN,,0,0,0,,AUDIENCE: Is the only solution to um...
Dialogue: 0,0:38:03.07,0:38:06.46,EN,,0,0,0,,the problem you raise to create another procedure?
Dialogue: 0,0:38:06.47,0:38:08.92,EN,,0,0,0,,In other words, can this only work in languages that are
Dialogue: 0,0:38:08.99,0:38:11.56,EN,,0,0,0,,capable of defining objects as procedures?
Dialogue: 0,0:38:12.41,0:38:13.76,EN,,0,0,0,,PROFESSOR: Oh, I see.
Dialogue: 0,0:38:15.90,0:38:19.74,EN,,0,0,0,,My solution to making this abstraction,
Dialogue: 0,0:38:20.14,0:38:22.86,EN,,0,0,0,,when I didn't want include the procedure inside the body,
Dialogue: 0,0:38:23.26,0:38:26.81,EN,,0,0,0,,depends upon my ability to return a procedure or export one.
Dialogue: 0,0:38:27.04,0:38:27.24,EN,,0,0,0,,AUDIENCE: And that's right.
Dialogue: 0,0:38:28.19,0:38:28.88,EN,,0,0,0,,PROFESSOR: And that's right.
Dialogue: 0,0:38:29.53,0:38:31.52,EN,,0,0,0,,If I don't have that,
Dialogue: 0,0:38:32.24,0:38:35.13,EN,,0,0,0,,then I just don't have this ability to make an abstraction in a way
Dialogue: 0,0:38:35.53,0:38:41.77,EN,,0,0,0,,where I don't have possibilities of symbol conflicts that were unanticipated.
Dialogue: 0,0:38:43.00,0:38:43.48,EN,,0,0,0,,That's right.
Dialogue: 0,0:38:44.14,0:38:46.51,EN,,0,0,0,,So one of the, the essential -- I consider, I consider
Dialogue: 0,0:38:46.54,0:38:48.91,EN,,0,0,0,,being able to return the procedural value and, therefore,
Dialogue: 0,0:38:49.20,0:38:58.28,EN,,0,0,0,,and therefore, to sort of have first class procedures, in general,
Dialogue: 0,0:38:59.13,0:39:02.46,EN,,0,0,0,,as being essential to doing very good modular programming.
Dialogue: 0,0:39:03.70,0:39:06.43,EN,,0,0,0,,Now, indeed there are many other ways to skin this cat.
Dialogue: 0,0:39:07.44,0:39:09.16,EN,,0,0,0,,What you can do is take for each of the
Dialogue: 0,0:39:09.18,0:39:11.84,EN,,0,0,0,,for each of the bad things that you have to worry about,
Dialogue: 0,0:39:12.27,0:39:15.20,EN,,0,0,0,,you can make a special feature that covers that thing.
Dialogue: 0,0:39:15.84,0:39:17.12,EN,,0,0,0,,You can make a package system.
Dialogue: 0,0:39:17.74,0:39:21.16,EN,,0,0,0,,You can make a module system as in Ada, et cetera. OK?
Dialogue: 0,0:39:22.24,0:39:24.88,EN,,0,0,0,,And all of those work, or they cover little regions of it.
Dialogue: 0,0:39:26.44,0:39:28.38,EN,,0,0,0,,The thing is that returning procedures as values
Dialogue: 0,0:39:28.41,0:39:29.74,EN,,0,0,0,,cover all of those problems.
Dialogue: 0,0:39:32.68,0:39:34.60,EN,,0,0,0,,And so it's the simplest mechanism
Dialogue: 0,0:39:35.58,0:39:37.79,EN,,0,0,0,,that gives you the best modularity,
Dialogue: 0,0:39:39.21,0:39:41.31,EN,,0,0,0,,gives you all of the known modularity mechanisms.
Dialogue: 0,0:39:45.59,0:39:48.24,EN,,0,0,0,,Well, I suppose it's time for the next break, thank you.
Dialogue: 0,0:39:48.24,0:40:01.08,EN,,0,0,0,,[JESU, JOY OF MAN'S DESIRING]
Dialogue: 0,0:40:01.28,0:40:04.75,EN,,0,0,0,,
Dialogue: 0,0:40:25.69,0:40:29.42,EN,,0,0,0,,
Dialogue: 0,0:40:30.01,0:40:33.28,EN,,0,0,0,,
Dialogue: 0,0:40:34.17,0:40:37.61,EN,,0,0,0,,
Dialogue: 0,0:40:42.32,0:40:44.28,EN,,0,0,0,,PROFESSOR: Well, yesterday when you learned about streams,
Dialogue: 0,0:40:46.01,0:40:51.16,EN,,0,0,0,,Hal worried to you about the order of evaluation
Dialogue: 0,0:40:51.95,0:40:53.87,EN,,0,0,0,,and delayed arguments to procedures.
Dialogue: 0,0:40:55.61,0:40:58.30,EN,,0,0,0,,The way we played with streams yesterday,
Dialogue: 0,0:41:00.25,0:41:04.22,EN,,0,0,0,,it was the responsibility of the caller and the callee
Dialogue: 0,0:41:05.77,0:41:08.84,EN,,0,0,0,,both agree that an argument was delayed,
Dialogue: 0,0:41:09.42,0:41:13.44,EN,,0,0,0,,and the callee must force the argument if it needs the answer.
Dialogue: 0,0:41:15.13,0:41:17.87,EN,,0,0,0,,So there had to be a lot of hand shaking between
Dialogue: 0,0:41:18.17,0:41:24.32,EN,,0,0,0,,the designer of a procedure and user of it over delayedness.
Dialogue: 0,0:41:26.36,0:41:28.72,EN,,0,0,0,,That turns out, of course, to be a fairly bad thing,
Dialogue: 0,0:41:29.48,0:41:30.96,EN,,0,0,0,,it works all right with streams.
Dialogue: 0,0:41:31.74,0:41:32.86,EN,,0,0,0,,But as a general thing,
Dialogue: 0,0:41:32.92,0:41:36.32,EN,,0,0,0,,what you want is an idea to have a locus,
Dialogue: 0,0:41:36.46,0:41:38.49,EN,,0,0,0,,a decision, a design decision in general,
Dialogue: 0,0:41:38.89,0:41:41.28,EN,,0,0,0,,to have a place where it's made, explicitly,
Dialogue: 0,0:41:41.63,0:41:43.93,EN,,0,0,0,,and notated in a clear way.
Dialogue: 0,0:41:45.88,0:41:49.28,EN,,0,0,0,,And so it's not a very good idea to have to have an agreement,
Dialogue: 0,0:41:50.46,0:41:54.89,EN,,0,0,0,,between the person who writes a procedure and the person who calls it,
Dialogue: 0,0:41:55.08,0:41:57.98,EN,,0,0,0,,about such details as, maybe, the arguments of evaluation,
Dialogue: 0,0:41:58.43,0:41:59.50,EN,,0,0,0,,the order of evaluation.
Dialogue: 0,0:41:59.50,0:42:00.75,EN,,0,0,0,,Although, that's not so bad.
Dialogue: 0,0:42:01.02,0:42:03.95,EN,,0,0,0,,I mean, we have other such agreements like, the input's a number.
Dialogue: 0,0:42:05.20,0:42:06.08,EN,,0,0,0,,But it would be nice if
Dialogue: 0,0:42:06.35,0:42:09.20,EN,,0,0,0,,one of these guys could take responsibility, completely.
Dialogue: 0,0:42:11.02,0:42:13.31,EN,,0,0,0,,Now this is not a new idea.
Dialogue: 0,0:42:15.51,0:42:21.16,EN,,0,0,0,,ALGOL 60 had two different ways of calling a procedure.
Dialogue: 0,0:42:22.02,0:42:24.28,EN,,0,0,0,,The arguments could be passed by name or by value.
Dialogue: 0,0:42:25.59,0:42:27.48,EN,,0,0,0,,And what that meant was that
Dialogue: 0,0:42:27.63,0:42:29.72,EN,,0,0,0,,a name argument was delayed.
Dialogue: 0,0:42:31.11,0:42:32.84,EN,,0,0,0,,That when you passed an argument by name,
Dialogue: 0,0:42:33.64,0:42:36.52,EN,,0,0,0,,that its value would only be obtained
Dialogue: 0,0:42:36.96,0:42:39.55,EN,,0,0,0,,if you accessed that argument.
Dialogue: 0,0:42:42.29,0:42:44.20,EN,,0,0,0,,So what I'd like to do now is show you,
Dialogue: 0,0:42:44.43,0:42:46.96,EN,,0,0,0,,first of all, a little bit about, again,
Dialogue: 0,0:42:46.99,0:42:48.65,EN,,0,0,0,,we're going to make a modification to a language.
Dialogue: 0,0:42:50.32,0:42:51.79,EN,,0,0,0,,In this case, we're going to add a feature.
Dialogue: 0,0:42:53.37,0:42:55.05,EN,,0,0,0,,We're going to add the feature of,
Dialogue: 0,0:42:55.36,0:42:58.73,EN,,0,0,0,,by name parameters, if you will, or delayed parameters.
Dialogue: 0,0:43:00.43,0:43:04.41,EN,,0,0,0,,Because, in fact, the default in our Lisp system
Dialogue: 0,0:43:04.76,0:43:06.60,EN,,0,0,0,,is by the value of a pointer.
Dialogue: 0,0:43:08.22,0:43:09.15,EN,,0,0,0,,A pointer is copied,
Dialogue: 0,0:43:09.15,0:43:10.91,EN,,0,0,0,,but the data structure it points at is not.
Dialogue: 0,0:43:13.41,0:43:14.84,EN,,0,0,0,,But I'd like to, in fact, show you
Dialogue: 0,0:43:15.04,0:43:18.38,EN,,0,0,0,,is how you add name arguments as well.
Dialogue: 0,0:43:19.99,0:43:22.12,EN,,0,0,0,,Now again, why would we need such a thing?
Dialogue: 0,0:43:23.10,0:43:24.72,EN,,0,0,0,,Well supposing we wanted to invent
Dialogue: 0,0:43:25.24,0:43:28.44,EN,,0,0,0,,certain kinds of what otherwise would be special forms,
Dialogue: 0,0:43:28.73,0:43:29.72,EN,,0,0,0,,reserve words?
Dialogue: 0,0:43:29.72,0:43:31.48,EN,,0,0,0,,But I'd rather not take up reserve words.
Dialogue: 0,0:43:32.18,0:43:34.76,EN,,0,0,0,,I want procedures that can do things like if.
Dialogue: 0,0:43:36.36,0:43:39.42,EN,,0,0,0,,If is special, or cond, or whatever it is.
Dialogue: 0,0:43:39.42,0:43:40.43,EN,,0,0,0,,It's the same thing.
Dialogue: 0,0:43:40.59,0:43:42.86,EN,,0,0,0,,It's special in that it determines whether or not
Dialogue: 0,0:43:42.92,0:43:45.02,EN,,0,0,0,,to evaluate the consequent or the alternative
Dialogue: 0,0:43:46.22,0:43:49.76,EN,,0,0,0,,based on the value of the predicate part of an expression.
Dialogue: 0,0:43:50.84,0:43:53.12,EN,,0,0,0,,So taking the value of one thing
Dialogue: 0,0:43:53.44,0:43:55.36,EN,,0,0,0,,determines whether or not to do something else.
Dialogue: 0,0:43:57.27,0:43:58.88,EN,,0,0,0,,Whereas all the procedures like plus,
Dialogue: 0,0:43:59.15,0:44:01.20,EN,,0,0,0,,evaluate... the ones that we can define right now,
Dialogue: 0,0:44:01.42,0:44:06.56,EN,,0,0,0,,evaluate all of their arguments before application.
Dialogue: 0,0:44:08.67,0:44:09.64,EN,,0,0,0,,So, for example,
Dialogue: 0,0:44:10.46,0:44:12.41,EN,,0,0,0,,supposing I wish to be able to define something like
Dialogue: 0,0:44:15.39,0:44:18.75,EN,,0,0,0,,the reverse of if in terms of if.
Dialogue: 0,0:44:19.85,0:44:20.70,EN,,0,0,0,,Call it unless.
Dialogue: 0,0:44:24.89,0:44:27.47,EN,,0,0,0,,We've a predicate, a consequent, and an alternative.
Dialogue: 0,0:44:28.67,0:44:30.44,EN,,0,0,0,,Now what I would like to sort of be able to do is
Dialogue: 0,0:44:30.46,0:44:32.08,EN,,0,0,0,,say-- oh, I'll do it in terms of cond.
Dialogue: 0,0:44:32.64,0:44:36.72,EN,,0,0,0,,Cond, if not the predicate,
Dialogue: 0,0:44:38.96,0:44:40.32,EN,,0,0,0,,then take the consequent,
Dialogue: 0,0:44:41.58,0:44:45.63,EN,,0,0,0,,otherwise, take the alternative.
Dialogue: 0,0:44:51.29,0:44:52.76,EN,,0,0,0,,Now, what I'd like this to mean,
Dialogue: 0,0:44:53.32,0:44:55.40,EN,,0,0,0,,is supposing I do something like this.
Dialogue: 0,0:44:56.92,0:45:04.12,EN,,0,0,0,,I'd like this unless say if equals one, 0,
Dialogue: 0,0:45:05.08,0:45:06.64,EN,,0,0,0,,then the answer is two,
Dialogue: 0,0:45:07.90,0:45:11.35,EN,,0,0,0,,otherwise, the quotient of one and 0.
Dialogue: 0,0:45:15.92,0:45:18.91,EN,,0,0,0,,What I'd like that to mean is the result of substituting
Dialogue: 0,0:45:20.00,0:45:23.26,EN,,0,0,0,,equal one, 0, and the quotient of one, 0
Dialogue: 0,0:45:23.66,0:45:24.76,EN,,0,0,0,,for p, c, and a.
Dialogue: 0,0:45:25.58,0:45:27.58,EN,,0,0,0,,I'd like that to mean, and this is funny,
Dialogue: 0,0:45:28.11,0:45:30.33,EN,,0,0,0,,I'd like it to transform into or mean
Dialogue: 0,0:45:30.75,0:45:38.44,EN,,0,0,0,,cond not equal one, 0,
Dialogue: 0,0:45:40.62,0:45:42.54,EN,,0,0,0,,then the result is two,
Dialogue: 0,0:45:44.28,0:45:45.10,EN,,0,0,0,,otherwise
Dialogue: 0,0:45:48.22,0:45:51.16,EN,,0,0,0,,I want it to be the quotient one and 0.
Dialogue: 0,0:45:54.48,0:45:56.48,EN,,0,0,0,,Now, you know that if I were to type this into Lisp,
Dialogue: 0,0:45:57.74,0:45:58.59,EN,,0,0,0,,I'd get a two.
Dialogue: 0,0:45:59.97,0:46:01.32,EN,,0,0,0,,There's no problem with that.
Dialogue: 0,0:46:02.91,0:46:04.64,EN,,0,0,0,,However, if I were to type this into Lisp,
Dialogue: 0,0:46:05.28,0:46:07.79,EN,,0,0,0,,because all the arguments are evaluated before I start,
Dialogue: 0,0:46:09.12,0:46:10.73,EN,,0,0,0,,then I'm going to get an error out of this.
Dialogue: 0,0:46:13.38,0:46:15.61,EN,,0,0,0,,So that if the substitutions work at all, of course,
Dialogue: 0,0:46:16.03,0:46:16.88,EN,,0,0,0,,I would get the right answer.
Dialogue: 0,0:46:16.88,0:46:20.16,EN,,0,0,0,,But here's a case where the substitutions don't work.
Dialogue: 0,0:46:22.17,0:46:23.86,EN,,0,0,0,,I don't get the wrong answer.
Dialogue: 0,0:46:23.86,0:46:24.67,EN,,0,0,0,,I get no answer.
Dialogue: 0,0:46:24.80,0:46:25.60,EN,,0,0,0,,I get an error.
Dialogue: 0,0:46:28.42,0:46:31.21,EN,,0,0,0,,Now, however, I'd like to be able to make my definition
Dialogue: 0,0:46:31.61,0:46:32.99,EN,,0,0,0,,so that this kind of thing works.
Dialogue: 0,0:46:34.48,0:46:36.51,EN,,0,0,0,,What I want to do is say something special
Dialogue: 0,0:46:36.70,0:46:38.76,EN,,0,0,0,,about c and a.
Dialogue: 0,0:46:39.93,0:46:43.15,EN,,0,0,0,,I want them to be delayed automatically.
Dialogue: 0,0:46:44.27,0:46:48.08,EN,,0,0,0,,I don't want them to be, I don't want them to be evaluated
Dialogue: 0,0:46:48.52,0:46:49.74,EN,,0,0,0,,at the time I call.
Dialogue: 0,0:46:51.52,0:46:52.72,EN,,0,0,0,,So I'm going to make a declaration,
Dialogue: 0,0:46:52.75,0:46:55.32,EN,,0,0,0,,and then I'm going to see how to implement such a declaration.
Dialogue: 0,0:46:55.60,0:46:57.63,EN,,0,0,0,,But again, I want you to say to yourself,
Dialogue: 0,0:46:57.79,0:47:00.25,EN,,0,0,0,,oh, this is an interesting kluge he's adding in here.
Dialogue: 0,0:47:00.76,0:47:02.16,EN,,0,0,0,,A kluge, you know.
Dialogue: 0,0:47:02.25,0:47:04.72,EN,,0,0,0,,The piles of kluges make a big complicated mess.
Dialogue: 0,0:47:05.75,0:47:09.79,EN,,0,0,0,,And is this going to foul up something else that might occur.
Dialogue: 0,0:47:10.12,0:47:12.70,EN,,0,0,0,,First of all, is it syntactically unambiguous?
Dialogue: 0,0:47:13.86,0:47:15.50,EN,,0,0,0,,Well, it will be syntactically unambiguous
Dialogue: 0,0:47:15.71,0:47:16.91,EN,,0,0,0,,with what we've seen so far.
Dialogue: 0,0:47:17.84,0:47:20.76,EN,,0,0,0,,But what I'm going to do may, in fact, cause trouble.
Dialogue: 0,0:47:21.67,0:47:24.67,EN,,0,0,0,,It may be that the thing I had will conflict with
Dialogue: 0,0:47:25.15,0:47:27.10,EN,,0,0,0,,type declarations I might want to add in the future
Dialogue: 0,0:47:28.19,0:47:31.08,EN,,0,0,0,,for giving some system, some compiler or something,
Dialogue: 0,0:47:31.21,0:47:33.66,EN,,0,0,0,,the ability to optimize given the types are known.
Dialogue: 0,0:47:34.75,0:47:36.97,EN,,0,0,0,,Or it might conflict with other types of declarations
Dialogue: 0,0:47:37.00,0:47:39.71,EN,,0,0,0,,that I might want to make about the formal parameters.
Dialogue: 0,0:47:40.57,0:47:42.56,EN,,0,0,0,,So I'm not making a general mechanism here
Dialogue: 0,0:47:43.77,0:47:45.24,EN,,0,0,0,,where I can add declarations.
Dialogue: 0,0:47:45.28,0:47:46.54,EN,,0,0,0,,And I would like to be able to do that.
Dialogue: 0,0:47:46.89,0:47:48.81,EN,,0,0,0,,But I don't want to talk about that right now.
Dialogue: 0,0:47:51.01,0:47:53.88,EN,,0,0,0,,So here I'm going to do, I'm going to build a kluge.
Dialogue: 0,0:47:57.56,0:48:08.38,EN,,0,0,0,,So we're going to define unless of a predicate--
Dialogue: 0,0:48:08.81,0:48:10.27,EN,,0,0,0,,and I'm going to call these by name--
Dialogue: 0,0:48:12.78,0:48:15.28,EN,,0,0,0,,the consequent, and name the alternative.
Dialogue: 0,0:48:19.85,0:48:25.28,EN,,0,0,0,,Huh, huh-- I got caught in the corner.
Dialogue: 0,0:48:31.76,0:48:35.61,EN,,0,0,0,,If not p then the result is c,
Dialogue: 0,0:48:36.80,0:48:41.16,EN,,0,0,0,,else-- that's what I'd like.
Dialogue: 0,0:48:44.67,0:48:46.88,EN,,0,0,0,,Where I can explicitly declare
Dialogue: 0,0:48:47.55,0:48:51.65,EN,,0,0,0,,certain of the parameters to be delayed, to be computed later.
Dialogue: 0,0:48:55.60,0:48:58.48,EN,,0,0,0,,Now, this is actually a very complicated modification to an interpreter
Dialogue: 0,0:48:58.70,0:48:59.77,EN,,0,0,0,,rather than a simple one.
Dialogue: 0,0:49:00.45,0:49:03.10,EN,,0,0,0,,The ones you saw before, dynamic binding
Dialogue: 0,0:49:03.40,0:49:06.89,EN,,0,0,0,,or adding indefinite argument procedures,
Dialogue: 0,0:49:07.50,0:49:08.52,EN,,0,0,0,,is relatively simple.
Dialogue: 0,0:49:09.28,0:49:11.28,EN,,0,0,0,,But this one changes a basic strategy.
Dialogue: 0,0:49:12.32,0:49:13.39,EN,,0,0,0,,The problem here
Dialogue: 0,0:49:13.96,0:49:17.63,EN,,0,0,0,,is that our interpreter, as written
Dialogue: 0,0:49:17.96,0:49:23.40,EN,,0,0,0,,evaluates a combination by evaluating the procedure,
Dialogue: 0,0:49:24.24,0:49:25.92,EN,,0,0,0,,the operator producing the procedure,
Dialogue: 0,0:49:26.20,0:49:30.35,EN,,0,0,0,,and evaluating the operands producing the arguments,
Dialogue: 0,0:49:30.76,0:49:35.26,EN,,0,0,0,,and then doing apply of the procedure to the arguments.
Dialogue: 0,0:49:36.38,0:49:37.07,EN,,0,0,0,,However, here,
Dialogue: 0,0:49:37.36,0:49:41.48,EN,,0,0,0,,I don't want to evaluate the operands to produce the arguments
Dialogue: 0,0:49:41.74,0:49:43.66,EN,,0,0,0,,until after I examined the procedure
Dialogue: 0,0:49:44.62,0:49:46.86,EN,,0,0,0,,to see what the procedure's declarations look like.
Dialogue: 0,0:49:49.59,0:49:50.59,EN,,0,0,0,,So let's look at that.
Dialogue: 0,0:49:52.68,0:49:56.54,EN,,0,0,0,,Here we have a changed evaluator.
Dialogue: 0,0:49:57.48,0:50:01.15,EN,,0,0,0,,I'm starting with the simple lexical evaluator,
Dialogue: 0,0:50:01.72,0:50:02.65,EN,,0,0,0,,not dynamic
Dialogue: 0,0:50:04.14,0:50:08.20,EN,,0,0,0,,but we're going to have to do something sort of similar in some ways.
Dialogue: 0,0:50:09.75,0:50:11.45,EN,,0,0,0,,Because of the fact that,
Dialogue: 0,0:50:11.90,0:50:13.34,EN,,0,0,0,,if I delay a procedure--
Dialogue: 0,0:50:13.66,0:50:15.15,EN,,0,0,0,,I'm sorry-- delay an argument to a procedure,
Dialogue: 0,0:50:15.40,0:50:17.52,EN,,0,0,0,,I'm going to have to attach and environment to it.
Dialogue: 0,0:50:19.36,0:50:21.55,EN,,0,0,0,,Remember how Hal implemented delay.
Dialogue: 0,0:50:23.38,0:50:25.44,EN,,0,0,0,,Hal implemented delay as being
Dialogue: 0,0:50:25.50,0:50:27.47,EN,,0,0,0,,a procedure of no arguments
Dialogue: 0,0:50:28.56,0:50:30.52,EN,,0,0,0,,which does some expression.
Dialogue: 0,0:50:31.18,0:50:36.94,EN,,0,0,0,,That's what delay of the expression is. --of that expression.
Dialogue: 0,0:50:39.29,0:50:40.99,EN,,0,0,0,,This turned into something like this.
Dialogue: 0,0:50:44.52,0:50:46.92,EN,,0,0,0,,Now, however, if I evaluate a lambda expression,
Dialogue: 0,0:50:47.42,0:50:49.20,EN,,0,0,0,,I have to capture the environment.
Dialogue: 0,0:50:51.41,0:50:53.45,EN,,0,0,0,,The reason why is because there are
Dialogue: 0,0:50:54.60,0:50:56.32,EN,,0,0,0,,there are variables in there
Dialogue: 0,0:50:57.02,0:51:00.83,EN,,0,0,0,,who's meaning I wish to derive from the context where this was written.
Dialogue: 0,0:51:04.01,0:51:05.76,EN,,0,0,0,,So that's why a lambda does the job.
Dialogue: 0,0:51:06.62,0:51:07.50,EN,,0,0,0,,It's the right thing.
Dialogue: 0,0:51:08.07,0:51:15.12,EN,,0,0,0,,And such that the forcing of a delayed expression
Dialogue: 0,0:51:16.52,0:51:20.08,EN,,0,0,0,,was same thing as calling that with no arguments.
Dialogue: 0,0:51:21.09,0:51:22.28,EN,,0,0,0,,It's just the opposite of this.
Dialogue: 0,0:51:24.10,0:51:26.94,EN,,0,0,0,,Producing an environment of the call
Dialogue: 0,0:51:27.36,0:51:29.90,EN,,0,0,0,,which is, in fact, the environment where this was defined
Dialogue: 0,0:51:30.81,0:51:32.36,EN,,0,0,0,,with an extra frame in it that's empty.
Dialogue: 0,0:51:33.23,0:51:34.41,EN,,0,0,0,,I don't care about that.
Dialogue: 0,0:51:36.24,0:51:39.40,EN,,0,0,0,,Well, if we go back to this slide,
Dialogue: 0,0:51:40.99,0:51:43.72,EN,,0,0,0,,since it's the case, if we look at this for a second,
Dialogue: 0,0:51:44.14,0:51:46.12,EN,,0,0,0,,everything is the same as it was before
Dialogue: 0,0:51:46.35,0:51:50.65,EN,,0,0,0,,except the case of applications or combinations.
Dialogue: 0,0:51:51.98,0:51:53.71,EN,,0,0,0,,And combinations are going to do two things.
Dialogue: 0,0:51:54.68,0:51:57.79,EN,,0,0,0,,One, is I have to evaluate the procedure--
Dialogue: 0,0:51:57.92,0:51:59.88,EN,,0,0,0,,I have to get the procedure-- by evaluating the operator.
Dialogue: 0,0:52:00.70,0:52:01.69,EN,,0,0,0,,That's what you see right here.
Dialogue: 0,0:52:02.38,0:52:04.35,EN,,0,0,0,,I have to make sure that that's current,
Dialogue: 0,0:52:04.46,0:52:05.76,EN,,0,0,0,,that is not a delayed object,
Dialogue: 0,0:52:06.36,0:52:09.85,EN,,0,0,0,,and evaluate that to the point where became it's forced now.
Dialogue: 0,0:52:10.73,0:52:12.08,EN,,0,0,0,,And then I have to somehow
Dialogue: 0,0:52:12.24,0:52:17.32,EN,,0,0,0,,apply that to the, to the operands.
Dialogue: 0,0:52:18.03,0:52:19.61,EN,,0,0,0,,But I have to keep the environment,
Dialogue: 0,0:52:19.63,0:52:20.92,EN,,0,0,0,,pass that environmental along.
Dialogue: 0,0:52:21.53,0:52:23.71,EN,,0,0,0,,So some of those operands I may have to delay.
Dialogue: 0,0:52:23.71,0:52:27.53,EN,,0,0,0,,I may have to attach that environment to those operands.
Dialogue: 0,0:52:29.66,0:52:31.52,EN,,0,0,0,,This is a rather complicated thing happening here.
Dialogue: 0,0:52:32.99,0:52:34.24,EN,,0,0,0,,Looking at that in apply.
Dialogue: 0,0:52:36.40,0:52:38.72,EN,,0,0,0,,Apply, well it has a primitive procedure
Dialogue: 0,0:52:39.36,0:52:40.60,EN,,0,0,0,,thing just like before.
Dialogue: 0,0:52:42.61,0:52:44.68,EN,,0,0,0,,But the compound one is a little more interesting.
Dialogue: 0,0:52:47.25,0:52:49.52,EN,,0,0,0,,I have to evaluate the body, just as before,
Dialogue: 0,0:52:50.48,0:52:51.98,EN,,0,0,0,,in an environment which is
Dialogue: 0,0:52:52.28,0:52:54.97,EN,,0,0,0,,which is the result of binding some
Dialogue: 0,0:52:55.61,0:53:00.29,EN,,0,0,0,,formal parameters to arguments in the environment.
Dialogue: 0,0:53:00.29,0:53:01.07,EN,,0,0,0,,That's true.
Dialogue: 0,0:53:01.53,0:53:03.82,EN,,0,0,0,,The environment is the one that comes from the procedure now.
Dialogue: 0,0:53:03.82,0:53:06.65,EN,,0,0,0,,It's a lexical language, statically bound.
Dialogue: 0,0:53:08.04,0:53:11.82,EN,,0,0,0,,However, one thing I have to do is strip off the declarations
Dialogue: 0,0:53:11.84,0:53:12.84,EN,,0,0,0,,to get the names of the variables.
Dialogue: 0,0:53:12.84,0:53:15.20,EN,,0,0,0,,That's what this guy does, vnames.
Dialogue: 0,0:53:15.45,0:53:16.67,EN,,0,0,0,,And the other thing I have to do
Dialogue: 0,0:53:16.97,0:53:18.86,EN,,0,0,0,,is process these declarations,
Dialogue: 0,0:53:19.13,0:53:21.52,EN,,0,0,0,,deciding which of these operands--
Dialogue: 0,0:53:21.76,0:53:23.92,EN,,0,0,0,,that's the operands now, as opposed to the arguments--
Dialogue: 0,0:53:24.09,0:53:25.87,EN,,0,0,0,,which of these operands to evaluate,
Dialogue: 0,0:53:26.62,0:53:30.20,EN,,0,0,0,,and which of them are to be
Dialogue: 0,0:53:30.99,0:53:33.77,EN,,0,0,0,,encapsulated in delays of some sort.
Dialogue: 0,0:53:37.28,0:53:40.08,EN,,0,0,0,,The other thing you see here is that we got a primitive,
Dialogue: 0,0:53:40.60,0:53:42.38,EN,,0,0,0,,a primitive like plus,
Dialogue: 0,0:53:42.68,0:53:45.58,EN,,0,0,0,,had better get at the real operands.
Dialogue: 0,0:53:45.82,0:53:47.39,EN,,0,0,0,,So here is a place where we're going to have to force them.
Dialogue: 0,0:53:47.92,0:53:50.38,EN,,0,0,0,,And we're going to look at what evlist is going to have to do a bunch of forces.
Dialogue: 0,0:53:51.34,0:53:52.78,EN,,0,0,0,,So we have two different kinds of evlist now.
Dialogue: 0,0:53:52.78,0:53:54.09,EN,,0,0,0,,We have evlist and gevlist.
Dialogue: 0,0:53:54.52,0:53:57.16,EN,,0,0,0,,Gevlist is going to wrap delays around some things
Dialogue: 0,0:53:57.18,0:53:59.74,EN,,0,0,0,,and force others, evaluate others.
Dialogue: 0,0:53:59.87,0:54:05.85,EN,,0,0,0,,And this guy's going to do some forcing of things.
Dialogue: 0,0:54:07.90,0:54:09.16,EN,,0,0,0,,Just looking at this a little bit,
Dialogue: 0,0:54:09.69,0:54:11.98,EN,,0,0,0,,this is a game you must play for yourself, you know.
Dialogue: 0,0:54:12.25,0:54:14.67,EN,,0,0,0,,It's not something that you're going to see all possible
Dialogue: 0,0:54:14.72,0:54:18.20,EN,,0,0,0,,variations on an evaluator talking to me.
Dialogue: 0,0:54:19.52,0:54:21.24,EN,,0,0,0,,What you have to do is do this for yourself.
Dialogue: 0,0:54:21.37,0:54:23.84,EN,,0,0,0,,And after you feel this, you play this a bit,
Dialogue: 0,0:54:24.22,0:54:27.02,EN,,0,0,0,,you get to see all the possible design decisions and what they might mean,
Dialogue: 0,0:54:27.77,0:54:29.16,EN,,0,0,0,,and how they interact with each other.
Dialogue: 0,0:54:29.93,0:54:32.38,EN,,0,0,0,,So what languages might have in them.
Dialogue: 0,0:54:33.16,0:54:34.64,EN,,0,0,0,,And what are some of the consistent sets
Dialogue: 0,0:54:34.94,0:54:36.32,EN,,0,0,0,,that make a legitimate language.
Dialogue: 0,0:54:37.20,0:54:40.06,EN,,0,0,0,,Whereas what things are complicated kluges that are just piles of junk.
Dialogue: 0,0:54:41.85,0:54:44.68,EN,,0,0,0,,So evlist of course, over here, just as I said,
Dialogue: 0,0:54:44.81,0:54:46.03,EN,,0,0,0,,is a list of operands
Dialogue: 0,0:54:46.70,0:54:50.28,EN,,0,0,0,,which are going to be undelayed after evaluation.
Dialogue: 0,0:54:50.75,0:54:51.90,EN,,0,0,0,,So these are going to be forced,
Dialogue: 0,0:54:53.28,0:54:54.44,EN,,0,0,0,,whatever that's going to mean.
Dialogue: 0,0:54:56.05,0:54:58.51,EN,,0,0,0,,And gevlist, which is the next thing--
Dialogue: 0,0:55:01.26,0:55:01.85,EN,,0,0,0,,Thank you.
Dialogue: 0,0:55:04.04,0:55:06.35,EN,,0,0,0,,What we see here, uh
Dialogue: 0,0:55:07.80,0:55:09.61,EN,,0,0,0,,well there's a couple of possibilities.
Dialogue: 0,0:55:09.81,0:55:11.52,EN,,0,0,0,,Either it's a normal, ordinary thing,
Dialogue: 0,0:55:12.48,0:55:13.69,EN,,0,0,0,,a symbol sitting there
Dialogue: 0,0:55:13.74,0:55:16.20,EN,,0,0,0,,like the predicate in the unless,
Dialogue: 0,0:55:17.64,0:55:18.81,EN,,0,0,0,,and that's what we have here.
Dialogue: 0,0:55:19.39,0:55:22.49,EN,,0,0,0,,In which case, this is intended to be evaluated in applicative order.
Dialogue: 0,0:55:23.34,0:55:25.45,EN,,0,0,0,,And it's, essentially, just what we had before.
Dialogue: 0,0:55:25.63,0:55:28.84,EN,,0,0,0,,It's mapping eval down the list.
Dialogue: 0,0:55:29.95,0:55:32.14,EN,,0,0,0,,In other words, I evaluate the first expression
Dialogue: 0,0:55:32.65,0:55:37.36,EN,,0,0,0,,and continue gevlisting the CDR of the expression in the environment.
Dialogue: 0,0:55:37.93,0:55:43.20,EN,,0,0,0,,However, it's possible that this is a name parameter.
Dialogue: 0,0:55:44.00,0:55:45.05,EN,,0,0,0,,If it's a name parameter,
Dialogue: 0,0:55:45.20,0:55:46.59,EN,,0,0,0,,I want to put a delay in
Dialogue: 0,0:55:47.00,0:55:50.97,EN,,0,0,0,,which combines that expression, which I'm calling by name,
Dialogue: 0,0:55:52.14,0:55:57.74,EN,,0,0,0,,with the environment that's available at this time
Dialogue: 0,0:55:59.05,0:56:00.59,EN,,0,0,0,,and passing that as the parameter.
Dialogue: 0,0:56:02.79,0:56:05.04,EN,,0,0,0,,And this is part of the mapping process that you see here.
Dialogue: 0,0:56:09.07,0:56:11.31,EN,,0,0,0,,The only other interesting place in this procedure
Dialogue: 0,0:56:11.37,0:56:13.53,EN,,0,0,0,,in this interpreter is cond.
Dialogue: 0,0:56:14.70,0:56:15.92,EN,,0,0,0,,People tend to write this thing,
Dialogue: 0,0:56:15.93,0:56:17.24,EN,,0,0,0,,and then they leave this one out.
Dialogue: 0,0:56:18.55,0:56:19.98,EN,,0,0,0,,There's a place where you have to force.
Dialogue: 0,0:56:20.51,0:56:23.10,EN,,0,0,0,,Conditionals have to know
Dialogue: 0,0:56:24.20,0:56:25.90,EN,,0,0,0,,whether or not the answer is true or false.
Dialogue: 0,0:56:25.99,0:56:26.83,EN,,0,0,0,,It's like a primitive.
Dialogue: 0,0:56:28.55,0:56:30.56,EN,,0,0,0,,When you do a conditional, you have to force.
Dialogue: 0,0:56:31.72,0:56:33.95,EN,,0,0,0,,Now, I'm not going to look at any more of this in any detail.
Dialogue: 0,0:56:34.62,0:56:36.28,EN,,0,0,0,,It isn't very exciting.
Dialogue: 0,0:56:36.75,0:56:38.99,EN,,0,0,0,,And what's left is how you make delays.
Dialogue: 0,0:56:38.99,0:56:40.91,EN,,0,0,0,,Well, delays are data structures
Dialogue: 0,0:56:41.31,0:56:44.75,EN,,0,0,0,,which contain an expression, an environment, and a type on them.
Dialogue: 0,0:56:44.84,0:56:46.36,EN,,0,0,0,,And it says they're a thunk.
Dialogue: 0,0:56:46.96,0:56:48.46,EN,,0,0,0,,That comes from ALGOL language,
Dialogue: 0,0:56:49.07,0:56:50.81,EN,,0,0,0,,and it's claimed to be the sound of
Dialogue: 0,0:56:50.83,0:56:52.06,EN,,0,0,0,,of something being pushed on a stack.
Dialogue: 0,0:56:52.97,0:56:53.41,EN,,0,0,0,,I don't know.
Dialogue: 0,0:56:53.41,0:56:57.12,EN,,0,0,0,,I was not an ALGOLician, so or an ALGOLite or whatever,
Dialogue: 0,0:56:57.60,0:56:58.38,EN,,0,0,0,,so I don't know.
Dialogue: 0,0:56:58.74,0:56:59.64,EN,,0,0,0,,But that's what was claimed.
Dialogue: 0,0:57:00.27,0:57:01.56,EN,,0,0,0,,And undelay is something
Dialogue: 0,0:57:01.77,0:57:03.66,EN,,0,0,0,,which will recursively undelay thunks
Dialogue: 0,0:57:03.69,0:57:06.00,EN,,0,0,0,,until the thunk becomes something which isn't a thunk.
Dialogue: 0,0:57:07.72,0:57:10.94,EN,,0,0,0,,This is the way you implement a call by name like thing in ALGOL.
Dialogue: 0,0:57:12.05,0:57:13.76,EN,,0,0,0,,And that's about all there is.
Dialogue: 0,0:57:15.21,0:57:16.25,EN,,0,0,0,,Are there any questions?
Dialogue: 0,0:57:26.68,0:57:27.52,EN,,0,0,0,,AUDIENCE: Gerry?
Dialogue: 0,0:57:28.09,0:57:28.80,EN,,0,0,0,,PROFESSOR: Yes, Vesko?
Dialogue: 0,0:57:30.03,0:57:32.99,EN,,0,0,0,,AUDIENCE: I noticed you avoided calling by name
Dialogue: 0,0:57:33.44,0:57:34.89,EN,,0,0,0,,in the primitive procedures,
Dialogue: 0,0:57:36.41,0:57:38.38,EN,,0,0,0,,I was wondering what cause you have on that?
Dialogue: 0,0:57:38.41,0:57:39.21,EN,,0,0,0,,You never need that?
Dialogue: 0,0:57:40.07,0:57:41.61,EN,,0,0,0,,PROFESSOR: Vesko is asking
Dialogue: 0,0:57:42.06,0:57:46.00,EN,,0,0,0,,if it's ever reasonable to call a primitive procedure by name?
Dialogue: 0,0:57:47.14,0:57:48.70,EN,,0,0,0,,The answer is, yes.
Dialogue: 0,0:57:49.27,0:57:52.32,EN,,0,0,0,,There's one particular case where it's reasonable, actually two.
Dialogue: 0,0:57:55.53,0:57:58.27,EN,,0,0,0,,Construction of a data structure like cons
Dialogue: 0,0:57:59.02,0:58:02.00,EN,,0,0,0,,where making an array if you have arrays with any number of elements.
Dialogue: 0,0:58:03.26,0:58:07.44,EN,,0,0,0,,OK? It's unnecessary to evaluate those arguments.
Dialogue: 0,0:58:07.44,0:58:08.83,EN,,0,0,0,,All you need is promises
Dialogue: 0,0:58:09.10,0:58:10.81,EN,,0,0,0,,to evaluate those arguments if you look at them.
Dialogue: 0,0:58:11.50,0:58:15.08,EN,,0,0,0,,If I cons together a, two things,
Dialogue: 0,0:58:16.24,0:58:17.77,EN,,0,0,0,,then I could cons together the promises
Dialogue: 0,0:58:17.80,0:58:19.93,EN,,0,0,0,,just as easily as I can cons together the things.
Dialogue: 0,0:58:21.15,0:58:23.37,EN,,0,0,0,,And it's not even when I CAR CDR them
Dialogue: 0,0:58:23.39,0:58:24.30,EN,,0,0,0,,that I have to look at them.
Dialogue: 0,0:58:24.84,0:58:26.97,EN,,0,0,0,,That just gets out the promises and passes them to somebody.
Dialogue: 0,0:58:28.26,0:58:30.51,EN,,0,0,0,,That's why the lambda calculus definition, the
Dialogue: 0,0:58:30.57,0:58:34.03,EN,,0,0,0,,the Alonzo Church definition of CAR, CDR, and cons makes sense.
Dialogue: 0,0:58:34.42,0:58:36.32,EN,,0,0,0,,It's because no work is done in CAR, CDR, and cons,
Dialogue: 0,0:58:36.38,0:58:40.06,EN,,0,0,0,,it's just shuffling data, it's just routing, if you will.
Dialogue: 0,0:58:40.99,0:58:42.20,EN,,0,0,0,,However, the things that do have
Dialogue: 0,0:58:42.24,0:58:43.84,EN,,0,0,0,,to look at data are things like plus.
Dialogue: 0,0:58:45.28,0:58:46.91,EN,,0,0,0,,Because they have a look at the bits
Dialogue: 0,0:58:47.12,0:58:48.30,EN,,0,0,0,,that the numbers are made out of,
Dialogue: 0,0:58:48.32,0:58:50.44,EN,,0,0,0,,unless they're lambda calculus numbers
Dialogue: 0,0:58:50.44,0:58:51.88,EN,,0,0,0,,which are funny. OK?
Dialogue: 0,0:58:52.43,0:58:53.58,EN,,0,0,0,,They have to look at the bits to
Dialogue: 0,0:58:53.77,0:58:55.53,EN,,0,0,0,,be able to crunch them together to do the add.
Dialogue: 0,0:58:59.21,0:58:59.92,EN,,0,0,0,,So, in fact,
Dialogue: 0,0:59:00.19,0:59:02.78,EN,,0,0,0,,data constructors, data selectors,
Dialogue: 0,0:59:03.24,0:59:05.50,EN,,0,0,0,,in fact, things that side-effect data objects
Dialogue: 0,0:59:06.27,0:59:09.76,EN,,0,0,0,,don't need to do, don't need to do any forcing
Dialogue: 0,0:59:11.34,0:59:13.39,EN,,0,0,0,,in the laziest possible interpreters.
Dialogue: 0,0:59:16.46,0:59:16.99,EN,,0,0,0,,On the other hand
Dialogue: 0,0:59:17.02,0:59:18.70,EN,,0,0,0,,predicates on data structures have to.
Dialogue: 0,0:59:19.61,0:59:22.65,EN,,0,0,0,,If you want to say, is this a, is this a pair?
Dialogue: 0,0:59:23.56,0:59:24.40,EN,,0,0,0,,Or is it a symbol?
Dialogue: 0,0:59:24.64,0:59:26.57,EN,,0,0,0,,Well, you better find out. You got to look at it then.
Dialogue: 0,0:59:30.30,0:59:31.18,EN,,0,0,0,,Any other questions?
Dialogue: 0,0:59:40.05,0:59:41.61,EN,,0,0,0,,Oh, well, I suppose it's time for a break.
