[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]
Scroll Position: 654
Active Line: 681

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: EN,Calisto MT,21,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,0,2,10,10,30,1
Style: Declare,微软雅黑,30,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,0,8,10,10,10,1
Style: staff,微软雅黑,30,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,0,2,5,10,10,10,1
Style: title,微软雅黑,35,&H001D64D9,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,0,1,5,10,10,10,1
Style: Default,雅黑宋体,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,0,2,10,10,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:18.27,0:00:19.68,EN,,0,0,0,,PROFESSOR: The last time we began having a look
Dialogue: 0,0:00:19.72,0:00:21.26,EN,,0,0,0,,at how languages are constructed.
Dialogue: 0,0:00:22.41,0:00:25.88,EN,,0,0,0,,Remember the main point that an evaluator for, LISP, say,
Dialogue: 0,0:00:26.08,0:00:27.58,EN,,0,0,0,,has two main elements.
Dialogue: 0,0:00:27.58,0:00:28.40,EN,,0,0,0,,There is EVAL,
Dialogue: 0,0:00:31.04,0:00:37.42,EN,,0,0,0,,and EVAL's job is to take in an expression and an environment
Dialogue: 0,0:00:38.91,0:00:44.44,EN,,0,0,0,,and turn that into a procedure and some arguments
Dialogue: 0,0:00:45.42,0:00:47.05,EN,,0,0,0,,and pass that off to APPLY.
Dialogue: 0,0:00:49.41,0:00:51.29,EN,,0,0,0,,And APPLY takes the procedure in the arguments,
Dialogue: 0,0:00:51.69,0:00:55.12,EN,,0,0,0,,turns that back into, in a general case, another expression
Dialogue: 0,0:00:55.39,0:00:57.71,EN,,0,0,0,,to be evaluated in another environment
Dialogue: 0,0:00:57.74,0:01:00.00,EN,,0,0,0,,and passes that off to EVAL, which passes it to APPLY,
Dialogue: 0,0:01:00.27,0:01:01.44,EN,,0,0,0,,and there's this whole big circle
Dialogue: 0,0:01:01.47,0:01:02.94,EN,,0,0,0,,where things go around and around and around
Dialogue: 0,0:01:03.02,0:01:06.56,EN,,0,0,0,,until you get either to some very primitive data or to a primitive procedure.
Dialogue: 0,0:01:07.74,0:01:09.24,EN,,0,0,0,,See, what this cycle has to do with
Dialogue: 0,0:01:09.44,0:01:12.57,EN,,0,0,0,,is unwinding the means of combination
Dialogue: 0,0:01:12.59,0:01:14.36,EN,,0,0,0,,and the means of abstraction in the language.
Dialogue: 0,0:01:15.02,0:01:17.72,EN,,0,0,0,,So for instance, you have a procedure in LISP--
Dialogue: 0,0:01:17.74,0:01:20.52,EN,,0,0,0,,a procedure is a general way of saying,
Dialogue: 0,0:01:20.54,0:01:22.57,EN,,0,0,0,,I want to be able to evaluate this expression
Dialogue: 0,0:01:22.67,0:01:24.41,EN,,0,0,0,,for any value of the arguments,
Dialogue: 0,0:01:25.76,0:01:27.18,EN,,0,0,0,,and that's sort of what's going on here.
Dialogue: 0,0:01:27.67,0:01:28.51,EN,,0,0,0,,That's what APPLY does.
Dialogue: 0,0:01:28.51,0:01:30.68,EN,,0,0,0,,It says the general thing coming in with the arguments
Dialogue: 0,0:01:30.72,0:01:32.70,EN,,0,0,0,,reduces to the expression that's the body,
Dialogue: 0,0:01:33.05,0:01:34.72,EN,,0,0,0,,and then if that's a compound expression
Dialogue: 0,0:01:34.83,0:01:36.46,EN,,0,0,0,,or another procedure application,
Dialogue: 0,0:01:36.78,0:01:38.44,EN,,0,0,0,,the thing will go around and around the circle.
Dialogue: 0,0:01:40.33,0:01:44.08,EN,,0,0,0,,Anyway, that's sort of the basic structure of gee, pretty much any interpreter.
Dialogue: 0,0:01:45.20,0:01:46.25,EN,,0,0,0,,The other thing that you saw
Dialogue: 0,0:01:46.28,0:01:47.66,EN,,0,0,0,,once you have the interpreter in your hands,
Dialogue: 0,0:01:47.69,0:01:49.87,EN,,0,0,0,,you have all this power to start playing with the language.
Dialogue: 0,0:01:49.87,0:01:51.52,EN,,0,0,0,,So you can make it dynamically scoped,
Dialogue: 0,0:01:51.84,0:01:54.56,EN,,0,0,0,,or you can put in normal order evaluation,
Dialogue: 0,0:01:54.59,0:01:56.48,EN,,0,0,0,,or you can add new forms to the language,
Dialogue: 0,0:01:56.86,0:01:57.50,EN,,0,0,0,,whatever you like.
Dialogue: 0,0:01:57.58,0:01:58.62,EN,,0,0,0,,Or more generally,
Dialogue: 0,0:01:58.76,0:02:01.32,EN,,0,0,0,,there's this notion of metalinguistic abstraction,
Dialogue: 0,0:02:02.64,0:02:06.01,EN,,0,0,0,,which says that part of your perspective
Dialogue: 0,0:02:07.61,0:02:10.52,EN,,0,0,0,,as an engineer, as a software engineer, but as an engineer in general
Dialogue: 0,0:02:11.39,0:02:13.88,EN,,0,0,0,,is that you can gain control of complexity
Dialogue: 0,0:02:14.96,0:02:17.16,EN,,0,0,0,,by inventing new languages sometimes.
Dialogue: 0,0:02:18.01,0:02:20.81,EN,,0,0,0,,See, one way to think about computer programming
Dialogue: 0,0:02:21.55,0:02:26.27,EN,,0,0,0,,is that it only incidentally has to do with getting a computer to do something.
Dialogue: 0,0:02:26.44,0:02:28.97,EN,,0,0,0,,Primarily what a computer program has to do with,
Dialogue: 0,0:02:29.00,0:02:32.52,EN,,0,0,0,,it's a way of expressing ideas with communicating ideas.
Dialogue: 0,0:02:33.16,0:02:34.04,EN,,0,0,0,,And sometimes
Dialogue: 0,0:02:34.89,0:02:36.62,EN,,0,0,0,,when you want to communicate new kinds of ideas,
Dialogue: 0,0:02:36.65,0:02:38.73,EN,,0,0,0,,you'd like to invent new modes of expressing that.
Dialogue: 0,0:02:39.82,0:02:44.99,EN,,0,0,0,,Well, today we're going to apply this framework to build a new language.
Dialogue: 0,0:02:45.73,0:02:48.00,EN,,0,0,0,,See, once we have the basic idea of the interpreter,
Dialogue: 0,0:02:48.03,0:02:50.27,EN,,0,0,0,,you can pretty much go build any language that you like.
Dialogue: 0,0:02:50.83,0:02:53.21,EN,,0,0,0,,So for example, we can go off and build Pascal.
Dialogue: 0,0:02:54.37,0:02:55.15,EN,,0,0,0,,And...
Dialogue: 0,0:02:56.17,0:02:58.19,EN,,0,0,0,,gee, we would worry about syntax and parsing
Dialogue: 0,0:02:58.19,0:03:00.51,EN,,0,0,0,,and various kinds of compiler optimizations,
Dialogue: 0,0:03:01.12,0:03:03.29,EN,,0,0,0,,and there are people who make honest livings doing that,
Dialogue: 0,0:03:03.85,0:03:07.60,EN,,0,0,0,,but at the level of abstraction that we're talking,
Dialogue: 0,0:03:08.04,0:03:10.99,EN,,0,0,0,,a Pascal interpreter would not look very different at all
Dialogue: 0,0:03:12.03,0:03:13.76,EN,,0,0,0,,from what you saw Gerry do last time.
Dialogue: 0,0:03:15.02,0:03:18.96,EN,,0,0,0,,Instead of that, we'll spend today building a really different language,
Dialogue: 0,0:03:20.51,0:03:22.81,EN,,0,0,0,,a language that encourages you
Dialogue: 0,0:03:23.05,0:03:26.04,EN,,0,0,0,,to think about programming not in terms of procedures,
Dialogue: 0,0:03:26.24,0:03:27.64,EN,,0,0,0,,but in a really different way.
Dialogue: 0,0:03:29.09,0:03:31.02,EN,,0,0,0,,And the lecture today is
Dialogue: 0,0:03:31.74,0:03:34.64,EN,,0,0,0,,going to be at two levels simultaneously.
Dialogue: 0,0:03:34.81,0:03:35.52,EN,,0,0,0,,On the one hand,
Dialogue: 0,0:03:35.90,0:03:37.71,EN,,0,0,0,,I'm going to show you what this language looks like,
Dialogue: 0,0:03:38.96,0:03:41.08,EN,,0,0,0,,and on the other hand, I'll show you how it's implemented.
Dialogue: 0,0:03:41.32,0:03:42.96,EN,,0,0,0,,And we'll build an implementation in LISP
Dialogue: 0,0:03:42.99,0:03:43.90,EN,,0,0,0,,and see how that works.
Dialogue: 0,0:03:44.04,0:03:48.25,EN,,0,0,0,,And you should be drawing lessons on two levels.
Dialogue: 0,0:03:48.68,0:03:53.00,EN,,0,0,0,,The first is to realize just how different a language can be.
Dialogue: 0,0:03:53.79,0:03:58.14,EN,,0,0,0,,So if you think that the jump from Fortran to LISP is a big deal,
Dialogue: 0,0:03:58.24,0:03:59.36,EN,,0,0,0,,you haven't seen anything yet.
Dialogue: 0,0:04:01.56,0:04:03.68,EN,,0,0,0,,And secondly,
Dialogue: 0,0:04:03.77,0:04:06.54,EN,,0,0,0,,you'll see that even with such a very different language,
Dialogue: 0,0:04:07.36,0:04:09.52,EN,,0,0,0,,which will turn out to not have procedures at all
Dialogue: 0,0:04:09.92,0:04:11.64,EN,,0,0,0,,and not talk about functions at all,
Dialogue: 0,0:04:12.20,0:04:15.72,EN,,0,0,0,,there will still be this basic cycle of eval and apply
Dialogue: 0,0:04:16.19,0:04:19.98,EN,,0,0,0,,that's unwinds the means of combination and the means an abstraction.
Dialogue: 0,0:04:20.95,0:04:24.68,EN,,0,0,0,,And then thirdly, as kind of a minor but elegant technical point,
Dialogue: 0,0:04:24.89,0:04:28.52,EN,,0,0,0,,you'll see a nice use of streams to avoid backtracking.
Dialogue: 0,0:04:32.33,0:04:34.40,EN,,0,0,0,,OK, well, I said that this language is very different.
Dialogue: 0,0:04:35.86,0:04:36.64,EN,,0,0,0,,To explain that,
Dialogue: 0,0:04:37.05,0:04:42.81,EN,,0,0,0,,let's go back to the very first idea that we talked about in this course,
Dialogue: 0,0:04:43.26,0:04:46.54,EN,,0,0,0,,and that was the idea of the distinction between
Dialogue: 0,0:04:46.72,0:04:49.52,EN,,0,0,0,,the declarative knowledge of mathematics--
Dialogue: 0,0:04:50.19,0:04:54.14,EN,,0,0,0,,the definition of a square root as a mathematical truth--
Dialogue: 0,0:04:55.48,0:04:59.56,EN,,0,0,0,,and the idea that computer science talks about the how to knowledge--
Dialogue: 0,0:04:59.76,0:05:04.59,EN,,0,0,0,,contrast that definition of square root with a program to compute a square root.
Dialogue: 0,0:05:05.97,0:05:07.07,EN,,0,0,0,,That's where we started off.
Dialogue: 0,0:05:08.51,0:05:09.52,EN,,0,0,0,,Well, wouldn't it be great
Dialogue: 0,0:05:09.88,0:05:12.16,EN,,0,0,0,,if you could somehow bridge this gap
Dialogue: 0,0:05:12.81,0:05:16.43,EN,,0,0,0,,and make a programming language which sort of did things,
Dialogue: 0,0:05:16.67,0:05:21.61,EN,,0,0,0,,but you talked about it in terms of truth, in declarative terms?
Dialogue: 0,0:05:22.38,0:05:25.50,EN,,0,0,0,,So that would be a programming language in which you specify facts.
Dialogue: 0,0:05:27.69,0:05:28.88,EN,,0,0,0,,You tell it what is.
Dialogue: 0,0:05:28.88,0:05:29.96,EN,,0,0,0,,You say what is true.
Dialogue: 0,0:05:30.95,0:05:33.07,EN,,0,0,0,,And then when you want an answer,
Dialogue: 0,0:05:33.21,0:05:36.38,EN,,0,0,0,,somehow the language has built into it automatically
Dialogue: 0,0:05:37.60,0:05:39.45,EN,,0,0,0,,general kinds of how to knowledge
Dialogue: 0,0:05:39.47,0:05:40.64,EN,,0,0,0,,so it can just take your facts
Dialogue: 0,0:05:40.89,0:05:42.83,EN,,0,0,0,,and it can evolve these methods on its own
Dialogue: 0,0:05:43.31,0:05:46.12,EN,,0,0,0,,using the facts you gave it and maybe some general rules of logic.
Dialogue: 0,0:05:49.33,0:05:50.54,EN,,0,0,0,,So for instance,
Dialogue: 0,0:05:52.06,0:05:55.12,EN,,0,0,0,,I might go up to this program and start telling it some things.
Dialogue: 0,0:05:56.00,0:06:07.08,EN,,0,0,0,,So I might tell it that the son of Adam is Abel.
Dialogue: 0,0:06:08.92,0:06:16.51,EN,,0,0,0,,And I might tell it that the son of Adam is Cain.
Dialogue: 0,0:06:17.66,0:06:25.08,EN,,0,0,0,,And I might tell it that the son of Cain is Enoch.
Dialogue: 0,0:06:27.79,0:06:34.89,EN,,0,0,0,,And I might tell it that the son of Enoch is Irad,
Dialogue: 0,0:06:37.02,0:06:40.72,EN,,0,0,0,,and all through the rest of our chapter whatever of Genesis,
Dialogue: 0,0:06:41.15,0:06:43.18,EN,,0,0,0,,which ends up ending in Adah, by the way,
Dialogue: 0,0:06:43.32,0:06:46.78,EN,,0,0,0,,and this shows the genealogy of Adah from Cain.
Dialogue: 0,0:06:48.44,0:06:50.67,EN,,0,0,0,,Anyway, once you tell it these facts,
Dialogue: 0,0:06:52.35,0:06:53.40,EN,,0,0,0,,you might ask it things.
Dialogue: 0,0:06:53.51,0:06:55.05,EN,,0,0,0,,You might go up to your language and say,
Dialogue: 0,0:06:56.06,0:06:59.29,EN,,0,0,0,,who's the son of Adam?
Dialogue: 0,0:07:00.42,0:07:04.91,EN,,0,0,0,,And you can very easily imagine having a little general purpose search program
Dialogue: 0,0:07:05.52,0:07:06.96,EN,,0,0,0,,which would be able to go through
Dialogue: 0,0:07:07.00,0:07:09.26,EN,,0,0,0,,and in response to that say, oh yeah, there are two answers:
Dialogue: 0,0:07:09.29,0:07:10.44,EN,,0,0,0,,the son of Adam is Abel
Dialogue: 0,0:07:10.68,0:07:12.17,EN,,0,0,0,,and the son of Adam is Cain.
Dialogue: 0,0:07:14.14,0:07:14.97,EN,,0,0,0,,Or you might say,
Dialogue: 0,0:07:15.07,0:07:16.89,EN,,0,0,0,,based on the very same facts,
Dialogue: 0,0:07:18.04,0:07:19.95,EN,,0,0,0,,who is Cain the son of?
Dialogue: 0,0:07:21.95,0:07:27.02,EN,,0,0,0,,And then you can imagine generating another slightly different search program
Dialogue: 0,0:07:27.92,0:07:29.21,EN,,0,0,0,,which would be able to go through
Dialogue: 0,0:07:29.45,0:07:33.05,EN,,0,0,0,,and checked for who is Cain, and son of,
Dialogue: 0,0:07:33.52,0:07:34.44,EN,,0,0,0,,and come up with Adam.
Dialogue: 0,0:07:35.89,0:07:36.99,EN,,0,0,0,,Or you might say,
Dialogue: 0,0:07:38.01,0:07:41.40,EN,,0,0,0,,what's the relationship between Cain and Enoch?
Dialogue: 0,0:07:42.07,0:07:45.08,EN,,0,0,0,,And again, a minor variant on that search program.
Dialogue: 0,0:07:46.34,0:07:48.16,EN,,0,0,0,,You could figure out that it said son of.
Dialogue: 0,0:07:52.88,0:07:54.92,EN,,0,0,0,,But even here in this very simple example,
Dialogue: 0,0:07:56.14,0:07:58.44,EN,,0,0,0,,what you see is that a single fact,
Dialogue: 0,0:07:58.81,0:08:01.52,EN,,0,0,0,,see, a single fact like the son of Adam is Cain
Dialogue: 0,0:08:02.84,0:08:05.52,EN,,0,0,0,,can be used to answer different kinds of questions.
Dialogue: 0,0:08:06.52,0:08:08.12,EN,,0,0,0,,You can say, who's Cain the son of,
Dialogue: 0,0:08:08.14,0:08:10.92,EN,,0,0,0,,or you can say who's the son of Adam,
Dialogue: 0,0:08:10.94,0:08:12.86,EN,,0,0,0,,or you can say what's the relation between Adam and Cain?
Dialogue: 0,0:08:12.88,0:08:14.48,EN,,0,0,0,,Those are different questions
Dialogue: 0,0:08:15.53,0:08:18.54,EN,,0,0,0,,being run by different traditional procedures
Dialogue: 0,0:08:18.68,0:08:20.72,EN,,0,0,0,,all based on the same fact.
Dialogue: 0,0:08:22.75,0:08:25.92,EN,,0,0,0,,And that's going to be the essence of the power of this programming style,
Dialogue: 0,0:08:26.91,0:08:29.50,EN,,0,0,0,,that one piece of declarative knowledge
Dialogue: 0,0:08:30.04,0:08:34.01,EN,,0,0,0,,can be used as the basis for a lot of different kinds of how-to knowledge,
Dialogue: 0,0:08:34.81,0:08:37.08,EN,,0,0,0,,as opposed to the kinds of procedures we're writing
Dialogue: 0,0:08:37.15,0:08:39.55,EN,,0,0,0,,where you sort of tell it what input you're giving in
Dialogue: 0,0:08:39.61,0:08:40.65,EN,,0,0,0,,and what answer you want.
Dialogue: 0,0:08:41.49,0:08:44.70,EN,,0,0,0,,So for instance, our square root program can perfectly well answer the question,
Dialogue: 0,0:08:44.76,0:08:47.16,EN,,0,0,0,,what's the square root of 144?
Dialogue: 0,0:08:48.90,0:08:49.77,EN,,0,0,0,,But in principle,
Dialogue: 0,0:08:49.82,0:08:52.83,EN,,0,0,0,,the mathematical definition of square root tells you other things.
Dialogue: 0,0:08:52.84,0:08:56.43,EN,,0,0,0,,Like it could say, what is 17 the square root of?
Dialogue: 0,0:08:57.59,0:08:59.71,EN,,0,0,0,,And that would be have to be answered by a different program.
Dialogue: 0,0:09:01.92,0:09:03.50,EN,,0,0,0,,So the mathematical definition,
Dialogue: 0,0:09:03.98,0:09:05.12,EN,,0,0,0,,or in general, the
Dialogue: 0,0:09:05.53,0:09:10.30,EN,,0,0,0,,the facts that you give it are somehow unbiased as to what the question is.
Dialogue: 0,0:09:10.90,0:09:12.81,EN,,0,0,0,,Whereas the programs we tend to write specifically
Dialogue: 0,0:09:12.83,0:09:14.20,EN,,0,0,0,,because they are how-to knowledge
Dialogue: 0,0:09:14.24,0:09:16.36,EN,,0,0,0,,tend to be looking for a specific answer.
Dialogue: 0,0:09:17.56,0:09:20.12,EN,,0,0,0,,So that's going to be one characteristic of what we're talking about.
Dialogue: 0,0:09:21.81,0:09:22.60,EN,,0,0,0,,We can go on.
Dialogue: 0,0:09:23.48,0:09:27.52,EN,,0,0,0,,We can imagine that we've given our language some sort of facts.
Dialogue: 0,0:09:27.71,0:09:29.61,EN,,0,0,0,,Now let's give it some rules of inference.
Dialogue: 0,0:09:30.02,0:09:31.36,EN,,0,0,0,,We can say, for instance,
Dialogue: 0,0:09:31.95,0:09:36.19,EN,,0,0,0,,if the-- make up some syntax here--
Dialogue: 0,0:09:36.44,0:09:41.53,EN,,0,0,0,,if the son of x is y--
Dialogue: 0,0:09:41.68,0:09:45.21,EN,,0,0,0,,I'll put question marks to indicate variables here--
Dialogue: 0,0:09:45.61,0:09:56.06,EN,,0,0,0,,if the son of x is y and the son of y is z,
Dialogue: 0,0:09:58.96,0:10:08.46,EN,,0,0,0,,then the grandson of x is z.
Dialogue: 0,0:10:09.32,0:10:13.40,EN,,0,0,0,,So I can imagine telling my machine that rule
Dialogue: 0,0:10:15.00,0:10:17.28,EN,,0,0,0,,and then being able to say, for instance,
Dialogue: 0,0:10:17.44,0:10:18.68,EN,,0,0,0,,who's the grandson of Adam?
Dialogue: 0,0:10:20.61,0:10:23.64,EN,,0,0,0,,Or who is Irad the grandson of?
Dialogue: 0,0:10:24.79,0:10:29.08,EN,,0,0,0,,Or deduce all grandson relationships you possibly can from this information.
Dialogue: 0,0:10:31.13,0:10:35.60,EN,,0,0,0,,We can imagine somehow the language knowing how to do that automatically.
Dialogue: 0,0:10:40.22,0:10:45.20,EN,,0,0,0,,Ok, Let me give you maybe a little bit more concrete example.
Dialogue: 0,0:10:45.77,0:10:51.95,EN,,0,0,0,,Here's a procedure that merges two sorted lists.
Dialogue: 0,0:10:53.92,0:11:00.27,EN,,0,0,0,,So x and y are two, say, lists of numbers,
Dialogue: 0,0:11:00.30,0:11:04.20,EN,,0,0,0,,lists of distinct numbers, if you like, that are in increasing order.
Dialogue: 0,0:11:04.76,0:11:07.53,EN,,0,0,0,,And what merge does is take two such lists
Dialogue: 0,0:11:07.71,0:11:10.38,EN,,0,0,0,,and combine them into a list where everything's in increasing order,
Dialogue: 0,0:11:11.21,0:11:15.00,EN,,0,0,0,,and this is a pretty easy programs
Dialogue: 0,0:11:15.02,0:11:16.14,EN,,0,0,0,,that you ought to be able to write.
Dialogue: 0,0:11:16.39,0:11:18.64,EN,,0,0,0,,It says, if x is empty, the answer is y.
Dialogue: 0,0:11:18.86,0:11:20.46,EN,,0,0,0,,If y is empty, the answer is x.
Dialogue: 0,0:11:21.18,0:11:22.99,EN,,0,0,0,,Otherwise, you compare the first two elements.
Dialogue: 0,0:11:22.99,0:11:24.46,EN,,0,0,0,,So you pick out the first thing in x
Dialogue: 0,0:11:24.84,0:11:26.01,EN,,0,0,0,,and the first thing in y,
Dialogue: 0,0:11:26.81,0:11:31.68,EN,,0,0,0,,and then depending on which of those first elements is less,
Dialogue: 0,0:11:32.83,0:11:36.60,EN,,0,0,0,,you stick the lower one on to the result a recursively merging,
Dialogue: 0,0:11:37.87,0:11:39.92,EN,,0,0,0,,either chopping the first one off x
Dialogue: 0,0:11:40.11,0:11:41.61,EN,,0,0,0,,or chopping the first one off y.
Dialogue: 0,0:11:42.40,0:11:43.96,EN,,0,0,0,,That's a standard kind of program.
Dialogue: 0,0:11:46.47,0:11:48.41,EN,,0,0,0,,Let's look at the logic.
Dialogue: 0,0:11:48.62,0:11:49.79,EN,,0,0,0,,Let's forget about the program
Dialogue: 0,0:11:50.28,0:11:52.76,EN,,0,0,0,,and look at the logic on which that procedure is based.
Dialogue: 0,0:11:53.82,0:11:55.00,EN,,0,0,0,,See, there's some logic which says,
Dialogue: 0,0:11:55.02,0:11:57.21,EN,,0,0,0,,gee, if the first one is less,
Dialogue: 0,0:11:57.53,0:12:00.00,EN,,0,0,0,,then we get the answer by sticking something onto the
Dialogue: 0,0:12:00.16,0:12:02.12,EN,,0,0,0,,the result of recursively merging the rest.
Dialogue: 0,0:12:02.84,0:12:04.09,EN,,0,0,0,,So let's try and be explicit about
Dialogue: 0,0:12:04.24,0:12:06.41,EN,,0,0,0,,what that logic is that's making the program work.
Dialogue: 0,0:12:08.30,0:12:09.44,EN,,0,0,0,,So here's one piece.
Dialogue: 0,0:12:10.13,0:12:11.53,EN,,0,0,0,,Here's the piece of the program which
Dialogue: 0,0:12:12.64,0:12:15.26,EN,,0,0,0,,recursively chops down x
Dialogue: 0,0:12:15.66,0:12:17.82,EN,,0,0,0,,if the first thing in x is smaller.
Dialogue: 0,0:12:19.98,0:12:22.54,EN,,0,0,0,,And if you want to be very explicit about what the logic is there,
Dialogue: 0,0:12:23.45,0:12:26.49,EN,,0,0,0,,what's really going on is a deduction,
Dialogue: 0,0:12:26.72,0:12:32.38,EN,,0,0,0,,which says, if you know that some list, that we'll call cdr of x, and y
Dialogue: 0,0:12:33.29,0:12:35.44,EN,,0,0,0,,merged to form z,
Dialogue: 0,0:12:37.84,0:12:41.52,EN,,0,0,0,,And you know that a is less than the first thing in y.
Dialogue: 0,0:12:43.60,0:12:48.52,EN,,0,0,0,,then you know that if you put a onto the cdr of x.
Dialogue: 0,0:12:49.74,0:12:51.85,EN,,0,0,0,,and that result and y
Dialogue: 0,0:12:52.60,0:12:54.99,EN,,0,0,0,,merge-to-form a onto z.
Dialogue: 0,0:12:55.82,0:12:58.09,EN,,0,0,0,,And what that is, that's the underlying piece of logic--
Dialogue: 0,0:12:58.72,0:12:59.95,EN,,0,0,0,,I haven't written it as a program,
Dialogue: 0,0:12:59.96,0:13:02.00,EN,,0,0,0,,I wrote it a sort of deduction
Dialogue: 0,0:13:02.03,0:13:04.89,EN,,0,0,0,,that sits underneath this particular clause
Dialogue: 0,0:13:05.21,0:13:07.26,EN,,0,0,0,,that says we can use the recursion there.
Dialogue: 0,0:13:09.41,0:13:12.78,EN,,0,0,0,,And then similar, here's the other clause just to complete it.
Dialogue: 0,0:13:14.00,0:13:15.87,EN,,0,0,0,,The other clause is based on this piece of logic,
Dialogue: 0,0:13:15.92,0:13:18.35,EN,,0,0,0,,which is almost the same and I won't go through it,
Dialogue: 0,0:13:19.00,0:13:20.35,EN,,0,0,0,,and then there's the end cases
Dialogue: 0,0:13:20.41,0:13:22.01,EN,,0,0,0,,where we tested for null,
Dialogue: 0,0:13:22.03,0:13:24.04,EN,,0,0,0,,and that's based on the idea that for any x,
Dialogue: 0,0:13:24.51,0:13:27.20,EN,,0,0,0,,x and the empty list merge to form an x,
Dialogue: 0,0:13:28.04,0:13:30.86,EN,,0,0,0,,or for any y, the empty list and y merge to form y.
Dialogue: 0,0:13:33.36,0:13:38.12,EN,,0,0,0,,OK, so there's a piece of procedure
Dialogue: 0,0:13:38.43,0:13:40.11,EN,,0,0,0,,and the logic on which it's based.
Dialogue: 0,0:13:41.74,0:13:42.97,EN,,0,0,0,,And notice a big difference.
Dialogue: 0,0:13:45.10,0:13:50.52,EN,,0,0,0,,The procedure looked like this:
Dialogue: 0,0:13:50.65,0:13:52.28,EN,,0,0,0,,it said there was a box--
Dialogue: 0,0:13:52.86,0:13:55.39,EN,,0,0,0,,and all the things we've been doing have the characteristic
Dialogue: 0,0:13:55.40,0:13:57.69,EN,,0,0,0,,we have boxes and things going in and things going out--
Dialogue: 0,0:13:58.08,0:13:59.61,EN,,0,0,0,,there was this box called merge,
Dialogue: 0,0:14:01.29,0:14:03.85,EN,,0,0,0,,and in came an x and y,
Dialogue: 0,0:14:04.44,0:14:05.37,EN,,0,0,0,,and out came an answer.
Dialogue: 0,0:14:07.63,0:14:09.48,EN,,0,0,0,,That's the character of the procedure that we wrote.
Dialogue: 0,0:14:13.02,0:14:14.66,EN,,0,0,0,,These rules don't look like that.
Dialogue: 0,0:14:14.66,0:14:16.76,EN,,0,0,0,,These rules talk about a relation.
Dialogue: 0,0:14:17.92,0:14:24.16,EN,,0,0,0,,There's some sort of relation that in those slides I called mrege-to-form.
Dialogue: 0,0:14:25.37,0:14:28.76,EN,,0,0,0,,So I said x and y merge to form z,
Dialogue: 0,0:14:29.00,0:14:32.33,EN,,0,0,0,,and somehow this is not -- this is a function.
Dialogue: 0,0:14:32.61,0:14:32.85,EN,,0,0,0,,Right?
Dialogue: 0,0:14:32.85,0:14:34.41,EN,,0,0,0,,The answer is a function of x and y,
Dialogue: 0,0:14:34.59,0:14:38.19,EN,,0,0,0,,and here what I have is a relation between three things.
Dialogue: 0,0:14:39.72,0:14:41.32,EN,,0,0,0,,And I'm not going to specify
Dialogue: 0,0:14:42.09,0:14:43.77,EN,,0,0,0,,which is the input and which is the output.
Dialogue: 0,0:14:44.20,0:14:47.40,EN,,0,0,0,,And the reason I want to say that is because in principle,
Dialogue: 0,0:14:48.64,0:14:50.83,EN,,0,0,0,,we could use exactly those same logic rules
Dialogue: 0,0:14:50.84,0:14:52.44,EN,,0,0,0,,answer a lot of different questions.
Dialogue: 0,0:14:54.57,0:14:56.30,EN,,0,0,0,,So we can say, for instance-- giving
Dialogue: 0,0:14:56.72,0:14:59.05,EN,,0,0,0,,imagine giving our machine those rules of logic.
Dialogue: 0,0:14:59.05,0:15:01.20,EN,,0,0,0,,Not the program, the underlying rules of logic.
Dialogue: 0,0:15:01.40,0:15:03.12,EN,,0,0,0,,Then it ought to be able to say--
Dialogue: 0,0:15:04.75,0:15:05.52,EN,,0,0,0,,we could ask it--
Dialogue: 0,0:15:06.73,0:15:19.18,EN,,0,0,0,,1, 3, 7 and 2, 4, 8 merge to form what?
Dialogue: 0,0:15:20.91,0:15:23.42,EN,,0,0,0,,And that's a question it ought to be able to answer.
Dialogue: 0,0:15:23.88,0:15:27.36,EN,,0,0,0,,That's exactly the same question that our Lisp procedure answered.
Dialogue: 0,0:15:28.18,0:15:30.14,EN,,0,0,0,,But the exact same rules
Dialogue: 0,0:15:30.89,0:15:34.80,EN,,0,0,0,,should also be able to answer a question like this:
Dialogue: 0,0:15:36.19,0:15:43.24,EN,,0,0,0,,1, 3, 7 and what merged to form 1, 2, 3, 4, 7, 8?
Dialogue: 0,0:15:45.56,0:15:47.80,EN,,0,0,0,,The same rules of logic can answer this,
Dialogue: 0,0:15:47.84,0:15:49.90,EN,,0,0,0,,although the procedure we wrote can't answer that question.
Dialogue: 0,0:15:50.80,0:15:52.33,EN,,0,0,0,,Or we might be able to say what
Dialogue: 0,0:15:53.71,0:16:01.12,EN,,0,0,0,,what and what else merge to form--
Dialogue: 0,0:16:04.28,0:16:12.68,EN,,0,0,0,,what and what else merge to form 1, 2, 3, 4, 7, 8?
Dialogue: 0,0:16:13.78,0:16:15.34,EN,,0,0,0,,And the thing should be able to go through,
Dialogue: 0,0:16:15.84,0:16:17.31,EN,,0,0,0,,if it really can apply that logic,
Dialogue: 0,0:16:17.79,0:16:22.54,EN,,0,0,0,,and deduce all, whatever is, 2 to the sixth answers to that question.
Dialogue: 0,0:16:25.60,0:16:27.69,EN,,0,0,0,,Cause it could be 1 and the rester, or it could be 1, 2 and the rest.
Dialogue: 0,0:16:27.69,0:16:28.75,EN,,0,0,0,,or it could be 1, 2 and the rester.
Dialogue: 0,0:16:28.79,0:16:31.53,EN,,0,0,0,,Or it could be 1 and 3 and 7 and the rest.
Dialogue: 0,0:16:32.01,0:16:33.26,EN,,0,0,0,,There's a whole bunch of answers.
Dialogue: 0,0:16:33.41,0:16:37.76,EN,,0,0,0,,And in principle, the logic should be enough to deduce that.
Dialogue: 0,0:16:38.55,0:16:42.03,EN,,0,0,0,,So there are going to be two big differences
Dialogue: 0,0:16:44.04,0:16:46.00,EN,,0,0,0,,in the kind of program we're going to look at
Dialogue: 0,0:16:46.54,0:16:48.19,EN,,0,0,0,,and not only Lisp,
Dialogue: 0,0:16:48.20,0:16:50.56,EN,,0,0,0,,but essentially all the programming you've probably done so far
Dialogue: 0,0:16:52.03,0:16:53.60,EN,,0,0,0,,in pretty much any language you can think of.
Dialogue: 0,0:16:54.15,0:16:57.79,EN,,0,0,0,,The first is, we're not going to be computing functions.
Dialogue: 0,0:17:00.62,0:17:02.01,EN,,0,0,0,,We're not going to be talking about
Dialogue: 0,0:17:02.62,0:17:04.41,EN,,0,0,0,,about things that take input and output.
Dialogue: 0,0:17:04.41,0:17:05.82,EN,,0,0,0,,We're going to be talking about relations.
Dialogue: 0,0:17:06.89,0:17:10.00,EN,,0,0,0,,And that means in principle, these relations don't have directionality.
Dialogue: 0,0:17:11.08,0:17:15.05,EN,,0,0,0,,So the knowledge that you specify to answer this question,
Dialogue: 0,0:17:16.46,0:17:18.41,EN,,0,0,0,,should be same, that same knowledge
Dialogue: 0,0:17:18.43,0:17:21.80,EN,,0,0,0,,also allow you to answer these other questions and conversely.
Dialogue: 0,0:17:26.60,0:17:29.40,EN,,0,0,0,,And the second issue is that
Dialogue: 0,0:17:29.61,0:17:31.23,EN,,0,0,0,,since we're talking about relations,
Dialogue: 0,0:17:32.32,0:17:34.44,EN,,0,0,0,,these relations don't necessarily have one answer.
Dialogue: 0,0:17:35.61,0:17:37.00,EN,,0,0,0,,So that third question down there
Dialogue: 0,0:17:37.02,0:17:38.36,EN,,0,0,0,,doesn't have a particular answer,
Dialogue: 0,0:17:38.40,0:17:39.58,EN,,0,0,0,,it has a whole bunch of answers.
Dialogue: 0,0:17:42.27,0:17:44.64,EN,,0,0,0,,Well, that's where we're going.
Dialogue: 0,0:17:44.64,0:17:45.90,EN,,0,0,0,,This style of programming,
Dialogue: 0,0:17:46.72,0:17:49.21,EN,,0,0,0,,by the way, is called logic programming,
Dialogue: 0,0:17:50.22,0:17:51.58,EN,,0,0,0,,for kind of obvious reasons.
Dialogue: 0,0:17:56.16,0:18:00.38,EN,,0,0,0,,And people who do logic programming say that --
Dialogue: 0,0:18:00.40,0:18:03.15,EN,,0,0,0,,they have this little phrase--
Dialogue: 0,0:18:03.16,0:18:04.67,EN,,0,0,0,,they say the point of logic programming
Dialogue: 0,0:18:04.76,0:18:09.00,EN,,0,0,0,,is that you use logic to express what is true,
Dialogue: 0,0:18:10.09,0:18:13.88,EN,,0,0,0,,you use logic to check whether something is true,
Dialogue: 0,0:18:14.67,0:18:17.24,EN,,0,0,0,,and you use logic to find out what is true.
Dialogue: 0,0:18:19.20,0:18:22.09,EN,,0,0,0,,The best known logic programming language,
Dialogue: 0,0:18:22.97,0:18:24.78,EN,,0,0,0,,as you probably know, is called Prolog.
Dialogue: 0,0:18:25.78,0:18:28.88,EN,,0,0,0,,The language that we're going to implement this morning
Dialogue: 0,0:18:29.82,0:18:32.32,EN,,0,0,0,,is something we call the query language,
Dialogue: 0,0:18:32.48,0:18:34.41,EN,,0,0,0,,and it essentially has the essence of prolog.
Dialogue: 0,0:18:35.32,0:18:36.73,EN,,0,0,0,,It can do about the same stuff,
Dialogue: 0,0:18:37.29,0:18:38.73,EN,,0,0,0,,although it's a lot slower
Dialogue: 0,0:18:38.73,0:18:40.01,EN,,0,0,0,,because we're going to implement it in LISP
Dialogue: 0,0:18:41.90,0:18:44.36,EN,,0,0,0,,rather than building a particular compiler.
Dialogue: 0,0:18:44.46,0:18:46.62,EN,,0,0,0,,We're going to interpret it on top of the LISP interpreter.
Dialogue: 0,0:18:47.51,0:18:49.84,EN,,0,0,0,,But other than that, it can do about the same stuff as prolog.
Dialogue: 0,0:18:49.88,0:18:52.78,EN,,0,0,0,,It has about the same power and about the same limitations.
Dialogue: 0,0:18:55.08,0:18:56.17,EN,,0,0,0,,All right, let's break for question.
Dialogue: 0,0:19:00.43,0:19:02.84,EN,,0,0,0,,AUDIENCE: Yes, could you please repeat what the three
Dialogue: 0,0:19:03.48,0:19:06.09,EN,,0,0,0,,things you use logic programming to find?
Dialogue: 0,0:19:06.72,0:19:09.84,EN,,0,0,0,,In other words, to find what is true, learn what is true-- what is the?
Dialogue: 0,0:19:09.84,0:19:10.52,EN,,0,0,0,,PROFESSOR: Right.
Dialogue: 0,0:19:10.56,0:19:15.74,EN,,0,0,0,,Sort of a logic programmer's little catechism.
Dialogue: 0,0:19:15.85,0:19:19.16,EN,,0,0,0,,You use logic to express what is true,
Dialogue: 0,0:19:20.80,0:19:21.79,EN,,0,0,0,,like these rules.
Dialogue: 0,0:19:22.61,0:19:25.56,EN,,0,0,0,,You use logic to check whether something is true,
Dialogue: 0,0:19:25.60,0:19:27.76,EN,,0,0,0,,and that's the kind of question I didn't answer here.
Dialogue: 0,0:19:28.55,0:19:29.29,EN,,0,0,0,,I might say--
Dialogue: 0,0:19:29.68,0:19:32.14,EN,,0,0,0,,another question I could put down here is to say,
Dialogue: 0,0:19:33.26,0:19:36.56,EN,,0,0,0,,is it true that 1, 3, 7 and 2, 4, 8
Dialogue: 0,0:19:36.91,0:19:40.38,EN,,0,0,0,,merge to form 1, 2, 6, 10
Dialogue: 0,0:19:41.12,0:19:44.68,EN,,0,0,0,,And that same logic should be enough to say no.
Dialogue: 0,0:19:45.69,0:19:47.93,EN,,0,0,0,,So I use logic to check what is true,
Dialogue: 0,0:19:48.28,0:19:50.48,EN,,0,0,0,,and then you also use logic to find out what's true.
Dialogue: 0,0:20:04.46,0:20:05.16,EN,,0,0,0,,Let's break.
Dialogue: 0,0:20:06.13,0:20:17.02,EN,,0,0,0,,[JESU, JOY OF MAN'S DESIRING]
Dialogue: 0,0:21:03.24,0:21:04.97,EN,,0,0,0,,PROFESSOR: OK, let's go ahead and
Dialogue: 0,0:21:05.84,0:21:08.44,EN,,0,0,0,,take a look at this query language and operation.
Dialogue: 0,0:21:10.52,0:21:11.84,EN,,0,0,0,,The first thing you might notice,
Dialogue: 0,0:21:12.24,0:21:14.14,EN,,0,0,0,,when I put up that little biblical database,
Dialogue: 0,0:21:14.16,0:21:17.24,EN,,0,0,0,,is that it's nice to be able to ask this language questions
Dialogue: 0,0:21:17.48,0:21:19.92,EN,,0,0,0,,in relation to some collection of facts.
Dialogue: 0,0:21:21.33,0:21:25.15,EN,,0,0,0,,So let's start off and make a little collection of facts.
Dialogue: 0,0:21:26.06,0:21:29.68,EN,,0,0,0,,This is a tiny fragment of personnel records
Dialogue: 0,0:21:30.08,0:21:32.62,EN,,0,0,0,,for a Boston high tech company,
Dialogue: 0,0:21:33.05,0:21:36.80,EN,,0,0,0,,and here's a piece of the personnel records of Ben Bitdiddle.
Dialogue: 0,0:21:37.50,0:21:41.95,EN,,0,0,0,,And Ben Bitdiddle is the computer wizard in this company,
Dialogue: 0,0:21:42.84,0:21:45.80,EN,,0,0,0,,he's the underpaid computer wizard in this company.
Dialogue: 0,0:21:46.42,0:21:48.78,EN,,0,0,0,,His supervisor is all Oliver Warbucks,
Dialogue: 0,0:21:49.28,0:21:50.70,EN,,0,0,0,,and here's his address.
Dialogue: 0,0:21:52.15,0:21:56.54,EN,,0,0,0,,So the format is we're giving this information: job, salary, supervisor, address.
Dialogue: 0,0:21:57.56,0:21:59.25,EN,,0,0,0,,And there are some other conventions.
Dialogue: 0,0:21:59.25,0:22:02.22,EN,,0,0,0,,Computer here means that Ben works in the computer division, and
Dialogue: 0,0:22:02.76,0:22:04.94,EN,,0,0,0,,his position in the computer division is wizard.
Dialogue: 0,0:22:05.66,0:22:07.15,EN,,0,0,0,,Here's somebody else.
Dialogue: 0,0:22:07.16,0:22:12.28,EN,,0,0,0,,Alyssa, Alyssa P. Hacker is a computer programmer,
Dialogue: 0,0:22:13.36,0:22:14.60,EN,,0,0,0,,and she works for Ben,
Dialogue: 0,0:22:15.21,0:22:16.54,EN,,0,0,0,,and she lives in Cambridge.
Dialogue: 0,0:22:17.55,0:22:19.42,EN,,0,0,0,,And there's another programmer who works for Ben
Dialogue: 0,0:22:20.03,0:22:21.44,EN,,0,0,0,,who's Lem E. Tweakit.
Dialogue: 0,0:22:22.82,0:22:26.73,EN,,0,0,0,,And there's a programmer trainee, who is Louis Reasoner,
Dialogue: 0,0:22:27.42,0:22:28.62,EN,,0,0,0,,and he works for Alyssa.
Dialogue: 0,0:22:30.10,0:22:35.45,EN,,0,0,0,,And the big wheel of the company doesn't work for anybody.
Dialogue: 0,0:22:36.81,0:22:38.11,EN,,0,0,0,,Right, That's Oliver Warbucks.
Dialogue: 0,0:22:38.11,0:22:39.31,EN,,0,0,0,,Anyway, what we're going to do is
Dialogue: 0,0:22:40.94,0:22:43.66,EN,,0,0,0,,is ask questions about that little world.
Dialogue: 0,0:22:44.97,0:22:48.40,EN,,0,0,0,,And that'll be a sample world that we're going to do logic in.
Dialogue: 0,0:22:51.42,0:22:54.96,EN,,0,0,0,,Let me just write up here, for probably the last time,
Dialogue: 0,0:22:55.60,0:22:58.20,EN,,0,0,0,,what I said is the very most important thing you should get out of this course,
Dialogue: 0,0:22:58.80,0:23:01.66,EN,,0,0,0,,and that is, when somebody tells you about a language,
Dialogue: 0,0:23:02.25,0:23:04.43,EN,,0,0,0,,you say, fine-- what are the primitives,
Dialogue: 0,0:23:06.12,0:23:07.79,EN,,0,0,0,,what are the means of combination,
Dialogue: 0,0:23:14.70,0:23:16.40,EN,,0,0,0,,how do you put the primitives together,
Dialogue: 0,0:23:16.67,0:23:19.37,EN,,0,0,0,,and then how do you abstract them,
Dialogue: 0,0:23:19.96,0:23:21.93,EN,,0,0,0,,how do you abstract the compound pieces
Dialogue: 0,0:23:24.68,0:23:27.58,EN,,0,0,0,,so you can use them as pieces to make something more complicated?
Dialogue: 0,0:23:29.02,0:23:30.81,EN,,0,0,0,,And we've said this a whole bunch of times already,
Dialogue: 0,0:23:31.16,0:23:32.48,EN,,0,0,0,,but it's worth saying again.
Dialogue: 0,0:23:35.00,0:23:36.67,EN,,0,0,0,,OKay? Let's start.
Dialogue: 0,0:23:36.67,0:23:37.34,EN,,0,0,0,,The primitives.
Dialogue: 0,0:23:37.77,0:23:39.44,EN,,0,0,0,,Well, there's really only one primitive,
Dialogue: 0,0:23:40.96,0:23:43.20,EN,,0,0,0,,and the primitive in this language is called a query.
Dialogue: 0,0:23:44.14,0:23:45.74,EN,,0,0,0,,A primitive query.
Dialogue: 0,0:23:46.81,0:23:48.25,EN,,0,0,0,,Let's look at some primitive queries.
Dialogue: 0,0:23:51.82,0:23:53.02,EN,,0,0,0,,Alright. Job x.
Dialogue: 0,0:23:53.10,0:23:54.81,EN,,0,0,0,,Who is a computer programmer?
Dialogue: 0,0:23:55.55,0:23:59.88,EN,,0,0,0,,Or find every fact in the database
Dialogue: 0,0:24:01.55,0:24:06.14,EN,,0,0,0,,that matches job of the x is computer programmer.
Dialogue: 0,0:24:06.64,0:24:08.01,EN,,0,0,0,,And you see a little syntax here.
Dialogue: 0,0:24:08.47,0:24:10.59,EN,,0,0,0,,Things without question marks are meant to be literal,
Dialogue: 0,0:24:11.28,0:24:13.15,EN,,0,0,0,,question mark x means that's a variable,
Dialogue: 0,0:24:13.31,0:24:15.56,EN,,0,0,0,,and this thing will match, for example,
Dialogue: 0,0:24:16.03,0:24:19.00,EN,,0,0,0,,the fact that Alyssa P. Hacker is a computer programmer,
Dialogue: 0,0:24:19.28,0:24:21.93,EN,,0,0,0,,or x is Alyssa P. Hacker.
Dialogue: 0,0:24:26.82,0:24:29.98,EN,,0,0,0,,Or more generally, I could have something with two variables in it.
Dialogue: 0,0:24:30.75,0:24:31.45,EN,,0,0,0,,I could say,
Dialogue: 0,0:24:31.60,0:24:35.88,EN,,0,0,0,,the job of x is computer something,
Dialogue: 0,0:24:39.34,0:24:41.39,EN,,0,0,0,,and that'll match computer wizard.
Dialogue: 0,0:24:42.14,0:24:44.28,EN,,0,0,0,,So there's something here: type will match wizard,
Dialogue: 0,0:24:44.92,0:24:46.46,EN,,0,0,0,,or type will match programmer,
Dialogue: 0,0:24:47.48,0:24:50.37,EN,,0,0,0,,or x might match various certain things.
Dialogue: 0,0:24:50.37,0:24:52.24,EN,,0,0,0,,So there are, in our little example,
Dialogue: 0,0:24:52.25,0:24:55.15,EN,,0,0,0,,only three facts in that database that match that query.
Dialogue: 0,0:24:59.12,0:25:02.08,EN,,0,0,0,,Let's see, just to show you some syntax, the same query,
Dialogue: 0,0:25:05.29,0:25:08.09,EN,,0,0,0,,this query doesn't match the job of x,
Dialogue: 0,0:25:09.85,0:25:11.79,EN,,0,0,0,,doesn't match Lewis Reasoner,
Dialogue: 0,0:25:11.84,0:25:13.64,EN,,0,0,0,,the reason for that is when I write something here,
Dialogue: 0,0:25:14.22,0:25:17.74,EN,,0,0,0,,what I mean is that this is going to be a list of two symbols,
Dialogue: 0,0:25:19.96,0:25:21.96,EN,,0,0,0,,of which the first is the word computer,
Dialogue: 0,0:25:22.32,0:25:23.80,EN,,0,0,0,,and the second can be anything.
Dialogue: 0,0:25:25.08,0:25:27.32,EN,,0,0,0,,And Lewis's job description here has three symbols,
Dialogue: 0,0:25:27.80,0:25:28.83,EN,,0,0,0,,so it doesn't match.
Dialogue: 0,0:25:30.34,0:25:32.19,EN,,0,0,0,,And just to show you a little bit of syntax,
Dialogue: 0,0:25:35.04,0:25:38.32,EN,,0,0,0,,the more general thing I might want to type is a thing with a dot here,
Dialogue: 0,0:25:40.17,0:25:42.92,EN,,0,0,0,,and this is just standard list notation for saying,
Dialogue: 0,0:25:43.04,0:25:43.82,EN,,0,0,0,,this is a list,
Dialogue: 0,0:25:44.12,0:25:47.32,EN,,0,0,0,,of which the first element is the word computers,
Dialogue: 0,0:25:47.58,0:25:50.22,EN,,0,0,0,,and THE REST, is something that I'll call type.
Dialogue: 0,0:25:53.73,0:25:55.50,EN,,0,0,0,,So this one would match.
Dialogue: 0,0:25:56.93,0:25:59.31,EN,,0,0,0,,Lewis's job is computer programmer trainee,
Dialogue: 0,0:25:59.44,0:26:03.29,EN,,0,0,0,,and type here would be the cdr of this list.
Dialogue: 0,0:26:03.32,0:26:05.64,EN,,0,0,0,,It would be the list programmer trainee.
Dialogue: 0,0:26:06.96,0:26:10.46,EN,,0,0,0,,And that kind of dot processing is done automatically by the LISP reader.
Dialogue: 0,0:26:15.90,0:26:17.76,EN,,0,0,0,,Well, let's actually try this.
Dialogue: 0,0:26:17.76,0:26:20.51,EN,,0,0,0,,The idea is I'm going to type in queries in this language,
Dialogue: 0,0:26:20.76,0:26:21.82,EN,,0,0,0,,and answers will come out.
Dialogue: 0,0:26:22.54,0:26:24.48,EN,,0,0,0,,Let's look at this.
Dialogue: 0,0:26:25.18,0:26:26.51,EN,,0,0,0,,I can go up and say,
Dialogue: 0,0:26:27.34,0:26:28.88,EN,,0,0,0,,who works in the computer division?
Dialogue: 0,0:26:30.00,0:26:38.22,EN,,0,0,0,,Job of x is computer dot y.
Dialogue: 0,0:26:39.73,0:26:41.48,EN,,0,0,0,,Doesn't matter what I call the dummy variables.
Dialogue: 0,0:26:42.76,0:26:44.14,EN,,0,0,0,,It says the answers to that,
Dialogue: 0,0:26:44.41,0:26:45.68,EN,,0,0,0,,and it's found four answers.
Dialogue: 0,0:26:48.65,0:26:50.09,EN,,0,0,0,,Or I can go off and say,
Dialogue: 0,0:26:50.56,0:26:52.38,EN,,0,0,0,,tell me about everybody's supervisor.
Dialogue: 0,0:26:52.81,0:26:54.88,EN,,0,0,0,,So I'll put in the query, the primitive query,
Dialogue: 0,0:26:56.52,0:26:59.39,EN,,0,0,0,,the supervisor of x is y.
Dialogue: 0,0:27:02.56,0:27:05.42,EN,,0,0,0,,There are all the supervisor relationships I know.
Dialogue: 0,0:27:05.54,0:27:08.83,EN,,0,0,0,,Or I could go type in, who lives in Cambridge?
Dialogue: 0,0:27:08.83,0:27:09.47,EN,,0,0,0,,So I can say,
Dialogue: 0,0:27:10.24,0:27:20.92,EN,,0,0,0,,the address of x is Cambridge dot anything.
Dialogue: 0,0:27:25.09,0:27:26.89,EN,,0,0,0,,And only one person lives in Cambridge.
Dialogue: 0,0:27:30.82,0:27:32.17,EN,,0,0,0,,OK, so those are primitive queries.
Dialogue: 0,0:27:32.17,0:27:34.96,EN,,0,0,0,,And you see what happens to basic interaction with the system
Dialogue: 0,0:27:35.29,0:27:39.24,EN,,0,0,0,,is you type in a query, and it types out all possible answers.
Dialogue: 0,0:27:39.62,0:27:40.65,EN,,0,0,0,,Or another way to say that:
Dialogue: 0,0:27:40.67,0:27:44.16,EN,,0,0,0,,it finds out all the possible values of those variables
Dialogue: 0,0:27:44.19,0:27:45.87,EN,,0,0,0,,x and y or t or whatever I've called them,
Dialogue: 0,0:27:46.09,0:27:52.08,EN,,0,0,0,,and it types out all ways of taking that query and instantiating it--
Dialogue: 0,0:27:52.92,0:27:55.16,EN,,0,0,0,,remember that from the rule system lecture--
Dialogue: 0,0:27:55.16,0:27:58.83,EN,,0,0,0,,instantiates the query with all possible values for those variables
Dialogue: 0,0:27:59.00,0:28:00.35,EN,,0,0,0,,and then types out all of them.
Dialogue: 0,0:28:01.00,0:28:03.35,EN,,0,0,0,,And there are a lot of ways you can arrange a logic language.
Dialogue: 0,0:28:03.35,0:28:06.01,EN,,0,0,0,,Prolog, for instance, does something slightly different.
Dialogue: 0,0:28:06.01,0:28:07.44,EN,,0,0,0,,Rather than typing back your query,
Dialogue: 0,0:28:07.76,0:28:10.78,EN,,0,0,0,,prolog would type out, x equals this and y equals that,
Dialogue: 0,0:28:10.97,0:28:12.94,EN,,0,0,0,,or x equals this and y equals that.
Dialogue: 0,0:28:13.66,0:28:15.48,EN,,0,0,0,,And that's a very surface level thing,
Dialogue: 0,0:28:15.71,0:28:17.05,EN,,0,0,0,,you can decide what you like.
Dialogue: 0,0:28:18.97,0:28:19.58,EN,,0,0,0,,OK.
Dialogue: 0,0:28:21.00,0:28:22.68,EN,,0,0,0,,Alright. So the primitives in this language?
Dialogue: 0,0:28:23.39,0:28:24.57,EN,,0,0,0,,Only one, right?
Dialogue: 0,0:28:24.57,0:28:27.23,EN,,0,0,0,,Primitive query.
Dialogue: 0,0:28:31.31,0:28:32.56,EN,,0,0,0,,Means of combination.
Dialogue: 0,0:28:34.33,0:28:37.68,EN,,0,0,0,,Let's look at some compound queries in this language.
Dialogue: 0,0:28:39.77,0:28:40.46,EN,,0,0,0,,Here's one.
Dialogue: 0,0:28:41.79,0:28:42.51,EN,,0,0,0,,This one says,
Dialogue: 0,0:28:45.05,0:28:48.22,EN,,0,0,0,,tell me all the people who work in the computer division.
Dialogue: 0,0:28:49.81,0:28:52.00,EN,,0,0,0,,Tell me all the people who work in the computer division
Dialogue: 0,0:28:52.54,0:28:53.96,EN,,0,0,0,,together with their supervisors.
Dialogue: 0,0:28:56.80,0:28:58.83,EN,,0,0,0,,Where I write that is the query is and.
Dialogue: 0,0:29:00.22,0:29:04.06,EN,,0,0,0,,And the job of the x is computer something or other.
Dialogue: 0,0:29:04.92,0:29:06.83,EN,,0,0,0,,And job of x is computer dot y.
Dialogue: 0,0:29:07.56,0:29:10.03,EN,,0,0,0,,And the supervisor of x is z.
Dialogue: 0,0:29:11.44,0:29:14.16,EN,,0,0,0,,Tell me all the people in the computer division-- that's this--
Dialogue: 0,0:29:14.30,0:29:15.88,EN,,0,0,0,,together with their supervisors.
Dialogue: 0,0:29:16.46,0:29:17.82,EN,,0,0,0,,And notice in this query
Dialogue: 0,0:29:18.67,0:29:22.41,EN,,0,0,0,,I have three variables-- x, y, and z.
Dialogue: 0,0:29:23.58,0:29:28.65,EN,,0,0,0,,And this x is supposed to be the same as that x.
Dialogue: 0,0:29:29.45,0:29:31.16,EN,,0,0,0,,So x works in the computer division,
Dialogue: 0,0:29:31.31,0:29:33.00,EN,,0,0,0,,and the supervisor of x is z.
Dialogue: 0,0:29:34.81,0:29:35.80,EN,,0,0,0,,Let's try another one.
Dialogue: 0,0:29:37.25,0:29:39.28,EN,,0,0,0,,So one means of combination is and.
Dialogue: 0,0:29:41.44,0:29:43.96,EN,,0,0,0,,Who are all the people who make more than $30,000?
Dialogue: 0,0:29:45.71,0:29:51.71,EN,,0,0,0,,And the salary of some person p is some amount a.
Dialogue: 0,0:29:54.59,0:29:57.45,EN,,0,0,0,,And when I go and look at a,
Dialogue: 0,0:29:57.48,0:30:00.12,EN,,0,0,0,,a is greater than $30,000.
Dialogue: 0,0:30:00.60,0:30:03.23,EN,,0,0,0,,And LISP value here is a little piece of interface
Dialogue: 0,0:30:04.30,0:30:10.04,EN,,0,0,0,,that interfaces the query language to the underlying LISP.
Dialogue: 0,0:30:10.60,0:30:12.72,EN,,0,0,0,,And what the LISP value allows you to do
Dialogue: 0,0:30:12.75,0:30:16.91,EN,,0,0,0,,call any LISP predicate inside a query.
Dialogue: 0,0:30:17.18,0:30:20.11,EN,,0,0,0,,So here I'm using the LISP predicate greater than, so I say LISP value.
Dialogue: 0,0:30:21.02,0:30:21.75,EN,,0,0,0,,This I say and.
Dialogue: 0,0:30:21.75,0:30:24.48,EN,,0,0,0,,So all the people whose salary is greater than $30,000.
Dialogue: 0,0:30:28.19,0:30:30.03,EN,,0,0,0,,Or here's a more complicated one.
Dialogue: 0,0:30:31.27,0:30:35.02,EN,,0,0,0,,Tell me all the people who work in the computer division
Dialogue: 0,0:30:36.25,0:30:39.36,EN,,0,0,0,,who do not have a supervisor who works in the computer division.
Dialogue: 0,0:30:42.79,0:30:45.51,EN,,0,0,0,,and x works in the computer division.
Dialogue: 0,0:30:45.51,0:30:47.32,EN,,0,0,0,,The job of x is computer dot y.
Dialogue: 0,0:30:47.78,0:30:49.24,EN,,0,0,0,,And it's not the case
Dialogue: 0,0:30:50.49,0:30:54.25,EN,,0,0,0,,that both x has a supervisor z
Dialogue: 0,0:30:55.37,0:30:57.87,EN,,0,0,0,,and the job of z is computer something or other.
Dialogue: 0,0:30:59.62,0:31:00.35,EN,,0,0,0,,All right, so again,
Dialogue: 0,0:31:00.51,0:31:02.38,EN,,0,0,0,,this x has got to be that x,
Dialogue: 0,0:31:03.20,0:31:05.76,EN,,0,0,0,,and this z is going to be that z.
Dialogue: 0,0:31:09.39,0:31:11.38,EN,,0,0,0,,And then you see another means a combination, not.
Dialogue: 0,0:31:17.71,0:31:18.67,EN,,0,0,0,,All right, well, let's look at that.
Dialogue: 0,0:31:20.88,0:31:22.08,EN,,0,0,0,,It works the same way.
Dialogue: 0,0:31:22.40,0:31:24.12,EN,,0,0,0,,I can go up to the machine and say
Dialogue: 0,0:31:26.89,0:31:35.40,EN,,0,0,0,,and the job of the x is computer dot y.
Dialogue: 0,0:31:38.84,0:31:45.95,EN,,0,0,0,,And the supervisor of x is z.
Dialogue: 0,0:31:46.83,0:31:49.53,EN,,0,0,0,,And I typed that in like a query.
Dialogue: 0,0:31:51.07,0:31:52.97,EN,,0,0,0,,And what it types back,
Dialogue: 0,0:31:54.00,0:31:58.73,EN,,0,0,0,,what you see are the queries I typed in instantiated by all possible answers.
Dialogue: 0,0:31:58.93,0:32:00.08,EN,,0,0,0,,And then you see there are a lot of answers.
Dialogue: 0,0:32:01.69,0:32:02.14,EN,,0,0,0,,All right.
Dialogue: 0,0:32:02.19,0:32:04.04,EN,,0,0,0,,So the means of combination in this language--
Dialogue: 0,0:32:05.21,0:32:06.60,EN,,0,0,0,,and this is why it's called a logic language--
Dialogue: 0,0:32:06.64,0:32:09.47,EN,,0,0,0,,are logical operations.
Dialogue: 0,0:32:09.80,0:32:15.68,EN,,0,0,0,,Means of combinations are things like AND and NOT
Dialogue: 0,0:32:15.96,0:32:17.92,EN,,0,0,0,,and there's one I didn't show you, which is OR.
Dialogue: 0,0:32:18.49,0:32:20.36,EN,,0,0,0,,And then I showed you LISP value,
Dialogue: 0,0:32:20.72,0:32:24.48,EN,,0,0,0,,which is a, not logic, of course,
Dialogue: 0,0:32:24.51,0:32:26.89,EN,,0,0,0,,but is a little special hack to interface that to LISP
Dialogue: 0,0:32:27.34,0:32:28.75,EN,,0,0,0,,so you can get more power.
Dialogue: 0,0:32:29.25,0:32:30.67,EN,,0,0,0,,Those are the means of combination.
Dialogue: 0,0:32:32.59,0:32:33.98,EN,,0,0,0,,OK, the means of abstraction.
Dialogue: 0,0:32:34.16,0:32:35.21,EN,,0,0,0,,What we'd like to do--
Dialogue: 0,0:32:38.27,0:32:41.24,EN,,0,0,0,,let's go back for second and look at that last slide.
Dialogue: 0,0:32:42.26,0:32:44.25,EN,,0,0,0,,We might like to take very complicated thing,
Dialogue: 0,0:32:44.46,0:32:48.00,EN,,0,0,0,,the idea that someone works in a division
Dialogue: 0,0:32:48.01,0:32:50.09,EN,,0,0,0,,but does not have a supervisor in the division.
Dialogue: 0,0:32:52.40,0:32:55.10,EN,,0,0,0,,And as before, name that.
Dialogue: 0,0:32:56.09,0:32:58.12,EN,,0,0,0,,Well, if someone works in a division
Dialogue: 0,0:32:58.17,0:33:00.25,EN,,0,0,0,,and does not have a supervisor who works in that division,
Dialogue: 0,0:33:00.48,0:33:01.93,EN,,0,0,0,,that means that person is a big shot.
Dialogue: 0,0:33:02.75,0:33:05.13,EN,,0,0,0,,So let's make a rule that
Dialogue: 0,0:33:06.43,0:33:09.16,EN,,0,0,0,,somebody x is a big shot in some department
Dialogue: 0,0:33:10.91,0:33:14.68,EN,,0,0,0,,if x works in the department
Dialogue: 0,0:33:16.04,0:33:20.08,EN,,0,0,0,,and it's not the case that x has a supervisor who works in the department.
Dialogue: 0,0:33:21.51,0:33:22.94,EN,,0,0,0,,So this is our means of abstraction.
Dialogue: 0,0:33:22.94,0:33:23.90,EN,,0,0,0,,This is a rule.
Dialogue: 0,0:33:26.22,0:33:27.58,EN,,0,0,0,,And a rule has three parts.
Dialogue: 0,0:33:31.00,0:33:32.48,EN,,0,0,0,,The thing that says it's a rule.
Dialogue: 0,0:33:33.40,0:33:35.48,EN,,0,0,0,,And then there's the conclusion of the rule.
Dialogue: 0,0:33:37.53,0:33:39.07,EN,,0,0,0,,And then there's the body of the rule.
Dialogue: 0,0:33:40.00,0:33:41.88,EN,,0,0,0,,And you can read this as a piece of logic which says,
Dialogue: 0,0:33:41.92,0:33:45.15,EN,,0,0,0,,if you know that the body of the rule is true,
Dialogue: 0,0:33:46.40,0:33:48.72,EN,,0,0,0,,then you can conclude that the conclusion is true.
Dialogue: 0,0:33:49.45,0:33:53.28,EN,,0,0,0,,Or in order to deduce that x is a big shot in some department,
Dialogue: 0,0:33:53.79,0:33:55.71,EN,,0,0,0,,it's enough to verify that.
Dialogue: 0,0:33:57.48,0:33:58.82,EN,,0,0,0,,So that's what rules look like.
Dialogue: 0,0:34:03.28,0:34:06.16,EN,,0,0,0,,Let's go back and look at that merge example
Dialogue: 0,0:34:06.73,0:34:07.92,EN,,0,0,0,,that I did before the break.
Dialogue: 0,0:34:08.11,0:34:10.68,EN,,0,0,0,,Let's look at how that would look in terms of rules.
Dialogue: 0,0:34:11.44,0:34:12.84,EN,,0,0,0,,I'm going to take the logic I put up
Dialogue: 0,0:34:13.08,0:34:15.50,EN,,0,0,0,,and just change it into a bunch of rules in this format.
Dialogue: 0,0:34:18.73,0:34:19.35,EN,,0,0,0,,We have a rule.
Dialogue: 0,0:34:19.35,0:34:20.96,EN,,0,0,0,,Remember, there was this thing merge-to-form.
Dialogue: 0,0:34:21.71,0:34:22.97,EN,,0,0,0,,There is a rule that says,
Dialogue: 0,0:34:26.28,0:34:29.62,EN,,0,0,0,,the empty list and y merge to form y.
Dialogue: 0,0:34:29.62,0:34:30.87,EN,,0,0,0,,This is the rule conclusion.
Dialogue: 0,0:34:33.21,0:34:35.74,EN,,0,0,0,,And notice this particular rule has no body.
Dialogue: 0,0:34:36.65,0:34:37.66,EN,,0,0,0,,And in this language,
Dialogue: 0,0:34:38.11,0:34:40.86,EN,,0,0,0,,a rule with no body is something that is always true.
Dialogue: 0,0:34:41.23,0:34:42.51,EN,,0,0,0,,You can always assume that's true.
Dialogue: 0,0:34:45.19,0:34:46.49,EN,,0,0,0,,And there was another piece of logic
Dialogue: 0,0:34:46.64,0:34:49.46,EN,,0,0,0,,that said anything in the empty list merged to form the anything.
Dialogue: 0,0:34:49.46,0:34:50.12,EN,,0,0,0,,That's this.
Dialogue: 0,0:34:50.90,0:34:53.55,EN,,0,0,0,,A rule y and the empty list merge to form y.
Dialogue: 0,0:34:55.51,0:34:58.40,EN,,0,0,0,,Those corresponded to the two end cases in our merge procedure,
Dialogue: 0,0:34:58.44,0:34:59.77,EN,,0,0,0,,but now we're talking about logic,
Dialogue: 0,0:35:00.41,0:35:01.45,EN,,0,0,0,,not about procedures.
Dialogue: 0,0:35:03.49,0:35:04.48,EN,,0,0,0,,Then we had another rule,
Dialogue: 0,0:35:04.83,0:35:08.73,EN,,0,0,0,,which said if you know how shorter things merge,
Dialogue: 0,0:35:08.91,0:35:09.83,EN,,0,0,0,,you can put them together.
Dialogue: 0,0:35:09.83,0:35:14.16,EN,,0,0,0,,So this says, if you have a list x and y and z,
Dialogue: 0,0:35:14.92,0:35:17.61,EN,,0,0,0,,and if you want to deduce that a dot x--
Dialogue: 0,0:35:17.63,0:35:19.08,EN,,0,0,0,,this means cons a onto x,
Dialogue: 0,0:35:19.48,0:35:22.36,EN,,0,0,0,,or a list whose first thing is a and whose rest is x--
Dialogue: 0,0:35:23.16,0:35:27.40,EN,,0,0,0,,so if you want to deduce that a dot x and b dot y merge to form b dot z--
Dialogue: 0,0:35:30.36,0:35:33.90,EN,,0,0,0,,that would say you merge these two lists a x and b y
Dialogue: 0,0:35:33.92,0:35:35.85,EN,,0,0,0,,and you're going to get something that starts with b--
Dialogue: 0,0:35:36.76,0:35:40.67,EN,,0,0,0,,you can deduce that if you know that it's the case
Dialogue: 0,0:35:40.91,0:35:44.48,EN,,0,0,0,,both that a dot x and y merge to form z
Dialogue: 0,0:35:45.18,0:35:47.24,EN,,0,0,0,,and a is larger than b.
Dialogue: 0,0:35:48.69,0:35:50.59,EN,,0,0,0,,So when I merge them, b will come first in the list.
Dialogue: 0,0:35:51.82,0:35:54.91,EN,,0,0,0,,That's a little translation of the logic rule
Dialogue: 0,0:35:55.24,0:35:57.18,EN,,0,0,0,,that I wrote in pseudo-English before.
Dialogue: 0,0:35:57.96,0:36:01.63,EN,,0,0,0,,And then just for completeness, here's the other case.
Dialogue: 0,0:36:02.88,0:36:05.95,EN,,0,0,0,,a dot x and b dot y merge to form a dot z
Dialogue: 0,0:36:06.08,0:36:09.16,EN,,0,0,0,,if x and b dot y merged to form z and b is larger than a.
Dialogue: 0,0:36:09.47,0:36:11.00,EN,,0,0,0,,and b is larger than a.
Dialogue: 0,0:36:12.19,0:36:15.98,EN,,0,0,0,,So that's a little program that I've typed in in this language,
Dialogue: 0,0:36:16.01,0:36:17.07,EN,,0,0,0,,and now let's look at it run.
Dialogue: 0,0:36:21.90,0:36:23.90,EN,,0,0,0,,So I typed in the merge rules before,
Dialogue: 0,0:36:24.62,0:36:25.77,EN,,0,0,0,,and I could say, ahh
Dialogue: 0,0:36:27.04,0:36:28.51,EN,,0,0,0,,I could use this like a procedure.
Dialogue: 0,0:36:28.51,0:36:38.24,EN,,0,0,0,,I could say merge to form 1 and 3 and 2 and 7.
Dialogue: 0,0:36:39.42,0:36:41.55,EN,,0,0,0,,So here I'm using it like the LISP procedure.
Dialogue: 0,0:36:43.16,0:36:44.97,EN,,0,0,0,,Now it's going to think about that for a while
Dialogue: 0,0:36:46.43,0:36:47.56,EN,,0,0,0,,and apply these rules.
Dialogue: 0,0:36:50.78,0:36:51.92,EN,,0,0,0,,So it found an answer.
Dialogue: 0,0:36:52.80,0:36:54.54,EN,,0,0,0,,Now it's going to see if there are any other answers
Dialogue: 0,0:36:55.07,0:36:57.32,EN,,0,0,0,,it doesn't know a priori there's only one answer.
Dialogue: 0,0:36:57.81,0:36:59.90,EN,,0,0,0,,So it's sitting here checking all possibilities,
Dialogue: 0,0:37:00.41,0:37:02.54,EN,,0,0,0,,and it says, no more. Done.
Dialogue: 0,0:37:03.16,0:37:05.07,EN,,0,0,0,,So there I've used those rules like a procedure.
Dialogue: 0,0:37:05.21,0:37:09.05,EN,,0,0,0,,Or remember the whole point is that I can ask different kinds of questions.
Dialogue: 0,0:37:10.22,0:37:11.07,EN,,0,0,0,,I could say
Dialogue: 0,0:37:18.56,0:37:24.59,EN,,0,0,0,,merge to form, let's see, how about 2 and a.
Dialogue: 0,0:37:24.59,0:37:27.90,EN,,0,0,0,,Some list of two elements which I know starts with 2,
Dialogue: 0,0:37:29.37,0:37:31.26,EN,,0,0,0,,and the other thing I don't know,
Dialogue: 0,0:37:33.05,0:37:35.04,EN,,0,0,0,,and x and some other list
Dialogue: 0,0:37:36.48,0:37:39.51,EN,,0,0,0,,merge to form a 1, 2, 3 and 4.
Dialogue: 0,0:37:42.76,0:37:44.11,EN,,0,0,0,,So now it's going to think about that.
Dialogue: 0,0:37:44.59,0:37:49.40,EN,,0,0,0,,It's got to find--  so it found one possibility.
Dialogue: 0,0:37:49.52,0:37:52.46,EN,,0,0,0,,It said a could be 3, and x could be the list 1, 4.
Dialogue: 0,0:37:53.72,0:37:55.16,EN,,0,0,0,,And now, again, it's got to check
Dialogue: 0,0:37:56.56,0:37:57.71,EN,,0,0,0,,because it doesn't a priori know
Dialogue: 0,0:37:57.74,0:38:00.30,EN,,0,0,0,,that there aren't any other possibilities going on.
Dialogue: 0,0:38:03.68,0:38:06.57,EN,,0,0,0,,Or like I said,
Dialogue: 0,0:38:07.00,0:38:09.84,EN,,0,0,0,,I could say something like merge to form,
Dialogue: 0,0:38:10.54,0:38:17.55,EN,,0,0,0,,like, what and what else merge to form 1, 2, 3, 4, 5?
Dialogue: 0,0:38:23.68,0:38:25.53,EN,,0,0,0,,Now it's going to think about that.
Dialogue: 0,0:38:28.49,0:38:30.31,EN,,0,0,0,,And there are a lot of answers that it might get.
Dialogue: 0,0:38:35.18,0:38:38.57,EN,,0,0,0,,And what you see is here you're really paying the price of slowness.
Dialogue: 0,0:38:42.21,0:38:43.88,EN,,0,0,0,,And kind of for three reasons.
Dialogue: 0,0:38:43.88,0:38:46.22,EN,,0,0,0,,One is that this language is doubly interpreted.
Dialogue: 0,0:38:47.63,0:38:49.72,EN,,0,0,0,,Whereas in a real implementation,
Dialogue: 0,0:38:49.76,0:38:52.04,EN,,0,0,0,,you would go compile this down to primitive operations.
Dialogue: 0,0:38:52.19,0:38:53.87,EN,,0,0,0,,The other reason is that
Dialogue: 0,0:38:53.88,0:38:58.11,EN,,0,0,0,,this particular algorithm for merges is doubly recursive.
Dialogue: 0,0:38:58.38,0:39:00.06,EN,,0,0,0,,So it's going to take a very long time.
Dialogue: 0,0:39:01.02,0:39:04.33,EN,,0,0,0,,And eventually, this is going to go through
Dialogue: 0,0:39:04.59,0:39:07.13,EN,,0,0,0,,and find-- find what?
Dialogue: 0,0:39:07.13,0:39:08.73,EN,,0,0,0,,Two to the fifth possible answers.
Dialogue: 0,0:39:12.14,0:39:14.96,EN,,0,0,0,,And you see they come out in some fairly arbitrary order,
Dialogue: 0,0:39:15.00,0:39:18.14,EN,,0,0,0,,depending on which order it's going to be trying these rules.
Dialogue: 0,0:39:20.16,0:39:22.11,EN,,0,0,0,,In fact, what we're going to do when they edit the videotape
Dialogue: 0,0:39:22.40,0:39:23.48,EN,,0,0,0,,is speed all this up.
Dialogue: 0,0:39:24.08,0:39:26.60,EN,,0,0,0,,Don't you like taking out these waits?
Dialogue: 0,0:39:26.60,0:39:28.27,EN,,0,0,0,,And don't you wish you could do that in your demos?
Dialogue: 0,0:39:29.48,0:39:34.24,EN,,0,0,0,,Anyway, it's still grinding there.
Dialogue: 0,0:39:39.22,0:39:41.12,EN,,0,0,0,,Anyway, there are 32 possibilities--
Dialogue: 0,0:39:41.13,0:39:42.63,EN,,0,0,0,,we won't wait for it to print out all of them.
Dialogue: 0,0:39:47.85,0:39:50.44,EN,,0,0,0,,OK, so the needs of abstraction in this language are rules.
Dialogue: 0,0:39:53.53,0:39:58.01,EN,,0,0,0,,So we take some bunch of things that are put together with logic
Dialogue: 0,0:39:59.12,0:40:00.08,EN,,0,0,0,,and we name them.
Dialogue: 0,0:40:00.35,0:40:03.41,EN,,0,0,0,,And you can think of that as naming a particular pattern of logic.
Dialogue: 0,0:40:03.41,0:40:04.54,EN,,0,0,0,,Or you can think of that as saying,
Dialogue: 0,0:40:04.56,0:40:06.75,EN,,0,0,0,,if you want to deduce some conclusion,
Dialogue: 0,0:40:07.90,0:40:09.52,EN,,0,0,0,,you can apply those rules of logic.
Dialogue: 0,0:40:10.66,0:40:13.20,EN,,0,0,0,,And those are three elements of this language.
Dialogue: 0,0:40:13.42,0:40:14.56,EN,,0,0,0,,Let's break now,
Dialogue: 0,0:40:14.60,0:40:16.59,EN,,0,0,0,,and then we'll talk about how it's actually implemented.
Dialogue: 0,0:40:23.61,0:40:28.84,EN,,0,0,0,,AUDIENCE: Does using LISP value primitive or whatever interfere with your means
Dialogue: 0,0:40:29.15,0:40:30.64,EN,,0,0,0,,both directions on a query?
Dialogue: 0,0:40:31.77,0:40:34.48,EN,,0,0,0,,PROFESSOR: OK, that's a-- the question is,
Dialogue: 0,0:40:35.08,0:40:36.92,EN,,0,0,0,,does using LISP value interfere
Dialogue: 0,0:40:37.53,0:40:40.09,EN,,0,0,0,,with the ability to go both directions on the query?
Dialogue: 0,0:40:40.09,0:40:42.81,EN,,0,0,0,,We haven't really talked about the implementation yet,
Dialogue: 0,0:40:43.68,0:40:45.52,EN,,0,0,0,,but the answer is, yes, it can.
Dialogue: 0,0:40:46.89,0:40:50.20,EN,,0,0,0,,In general, as we'll see at the end--
Dialogue: 0,0:40:50.22,0:40:52.17,EN,,0,0,0,,although I really won't to go into details--
Dialogue: 0,0:40:53.21,0:40:59.36,EN,,0,0,0,,it's fairly complicated, especially when you use either not or LISP value--
Dialogue: 0,0:40:59.55,0:41:02.89,EN,,0,0,0,,or actually, if you use anything besides only and,
Dialogue: 0,0:41:04.12,0:41:08.19,EN,,0,0,0,,it becomes very complicated to say when these things will work.
Dialogue: 0,0:41:08.20,0:41:10.36,EN,,0,0,0,,They won't work quite in all situations.
Dialogue: 0,0:41:10.36,0:41:13.39,EN,,0,0,0,,I'll talk about that at the end of the second half today.
Dialogue: 0,0:41:14.30,0:41:15.84,EN,,0,0,0,,But the answer to your question is, yes,
Dialogue: 0,0:41:16.19,0:41:19.21,EN,,0,0,0,,by dragging in a lot more power from LISP value,
Dialogue: 0,0:41:19.40,0:41:23.77,EN,,0,0,0,,you lose some of the principal power of logic programming.
Dialogue: 0,0:41:24.17,0:41:25.56,EN,,0,0,0,,That's a trade-off that you have to make.
Dialogue: 0,0:41:28.48,0:41:29.39,EN,,0,0,0,,OK, let's take a break.
